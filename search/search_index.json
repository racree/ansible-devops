{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MAS Devops Ansible Collection \uf0c1 Requirements \uf0c1 Python & Ansible \uf0c1 Python 3.8 is recommended as it is the most widely used version of Python within our development team, but any in-support 3.x version of Python should work fine: The following python modules are required in order to use this collection. openshift ansible Useful commands \uf0c1 Confirm availability and version: python --version Installed Python modules: python -m pip install ansible openshift==0.11.2 Confirm that ansible has been correctly installed: ansible-playbook --version IBM Cloud CLI \uf0c1 If you are using this collection to manage an OpenShift cluster in IBM Cloud RedHat OpenShift Kubernetes Service (ROKS), then you must install the IBM Cloud CLI: Useful commands \uf0c1 Install: curl -sL https://raw.githubusercontent.com/IBM-Cloud/ibm-cloud-developer-tools/master/linux-installer/idt-installer | bash Confirm availability and version: ibmcloud version OpenShift CLI \uf0c1 If you do not already have the oc command line tool, you can download the version corresponding to the OpenShift cluster you are using, from the Command Line Tools option under the help menu Useful commands \uf0c1 Confirm availability and version: oc version Note This is a rather annoying chicken and egg situation, you need to have a running OCP instance before you can access the command line client that we want to use to automate setting up that instance. See ibm-mas/ansible-devops#2 Installation \uf0c1 Install the collection direct from Ansible Galaxy ansible-galaxy collection install ibm.mas_devops Change Log \uf0c1 Note that links to pull requests prior to public release of the code (4.0) direct to IBM GitHub Enterprise, and will only be accessible to IBM employees. 4.2 Add support for Tekton pipelines ( #34 ) 4.1 Add ocp_verify role and associated playbook ( #20 ) 4.0 Initial Public Release on ibm.mas_devops ( #5 ) 3.3 Support configurable SLS settings ( #53 ) 3.2 Add support for BAS ( #44 ) 3.1 Add support for SLS ( #35 ) 3.0 Switch to config dir instead of config file list ( #36 ) 2.7 Support AirGap install of MAS ( #28 ) 2.6 Add support for Gen2 application mgmt (install and configure) ( #24 ) 2.5 Add support for Watson Studio ( #16 ) 2.4 Add support for MongoDb Community Edition ( #25 ) 2.3 Add support for IBM Cloud resource groups ( #20 ) 2.2 Support DNS and certificate mgmt with CIS & LetsEncrypt ( #10 ) 2.1 Add support for AMQ Streams (Kafka) ( #19 ) 2.0 Major refactor of the roles and playbooks ( #17 ) 1.2 Add initial Spark support (incomplete) ( #15 ) 1.1 Enable db2wh SSL and generate jdbccfg for MAS ( #9 ) 1.0 Initial release","title":"Home"},{"location":"#mas-devops-ansible-collection","text":"","title":"MAS Devops Ansible Collection"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#python-ansible","text":"Python 3.8 is recommended as it is the most widely used version of Python within our development team, but any in-support 3.x version of Python should work fine: The following python modules are required in order to use this collection. openshift ansible","title":"Python &amp; Ansible"},{"location":"#useful-commands","text":"Confirm availability and version: python --version Installed Python modules: python -m pip install ansible openshift==0.11.2 Confirm that ansible has been correctly installed: ansible-playbook --version","title":"Useful commands"},{"location":"#ibm-cloud-cli","text":"If you are using this collection to manage an OpenShift cluster in IBM Cloud RedHat OpenShift Kubernetes Service (ROKS), then you must install the IBM Cloud CLI:","title":"IBM Cloud CLI"},{"location":"#useful-commands_1","text":"Install: curl -sL https://raw.githubusercontent.com/IBM-Cloud/ibm-cloud-developer-tools/master/linux-installer/idt-installer | bash Confirm availability and version: ibmcloud version","title":"Useful commands"},{"location":"#openshift-cli","text":"If you do not already have the oc command line tool, you can download the version corresponding to the OpenShift cluster you are using, from the Command Line Tools option under the help menu","title":"OpenShift CLI"},{"location":"#useful-commands_2","text":"Confirm availability and version: oc version Note This is a rather annoying chicken and egg situation, you need to have a running OCP instance before you can access the command line client that we want to use to automate setting up that instance. See ibm-mas/ansible-devops#2","title":"Useful commands"},{"location":"#installation","text":"Install the collection direct from Ansible Galaxy ansible-galaxy collection install ibm.mas_devops","title":"Installation"},{"location":"#change-log","text":"Note that links to pull requests prior to public release of the code (4.0) direct to IBM GitHub Enterprise, and will only be accessible to IBM employees. 4.2 Add support for Tekton pipelines ( #34 ) 4.1 Add ocp_verify role and associated playbook ( #20 ) 4.0 Initial Public Release on ibm.mas_devops ( #5 ) 3.3 Support configurable SLS settings ( #53 ) 3.2 Add support for BAS ( #44 ) 3.1 Add support for SLS ( #35 ) 3.0 Switch to config dir instead of config file list ( #36 ) 2.7 Support AirGap install of MAS ( #28 ) 2.6 Add support for Gen2 application mgmt (install and configure) ( #24 ) 2.5 Add support for Watson Studio ( #16 ) 2.4 Add support for MongoDb Community Edition ( #25 ) 2.3 Add support for IBM Cloud resource groups ( #20 ) 2.2 Support DNS and certificate mgmt with CIS & LetsEncrypt ( #10 ) 2.1 Add support for AMQ Streams (Kafka) ( #19 ) 2.0 Major refactor of the roles and playbooks ( #17 ) 1.2 Add initial Spark support (incomplete) ( #15 ) 1.1 Enable db2wh SSL and generate jdbccfg for MAS ( #9 ) 1.0 Initial release","title":"Change Log"},{"location":"playbooks/bas/","text":"BAS Playbooks \uf0c1 Install BAS \uf0c1 Before you use this playbook you will likely want to edit the mas_config_dir variable to supply your own configurtation, instead of the sample data provided. Required environment variables \uf0c1 BAS_PERSISTENT_STORAGE Storage Class To be used by BAS persistent storage BAS_META_STORAGE Storage Class To be used by BAS metadata storage BAS_PASSWORD Defines the password for your BAS instance GRAPHANA_PASSWORD Defines the password for BAS Graphana dashbaord BAS_CONTACT_MAIL Defines the email for person to contact for BAS BAS_CONTACT_FIRSTNAME Defines the first name of the person to contact for BAS BAS_CONTACT_LASTNAME Defines the last name of the person to contact for BAS Optional environment variables \uf0c1 BAS_USERNAME Defines the username for the BAS instance, default is basuser GRAPHANA_USERNAME Defines the username for the BAS Graphana instance, default is basuser BAS_NAMESPACE Defines the namespace where BAS will be installed in openshift, default is ibm-bas Usage: \uf0c1 export BAS_PERSISTENT_STORAGE=xxx export BAS_META_STORAGE=xxx export BAS_PASSWORD=xxx export GRAPHANA_PASSWORD=xxx export BAS_CONTACT_MAIL=xxx export BAS_CONTACT_FIRSTNAME=xxx export BAS_CONTACT_LASTNAME=xxx ansible-playbook playbooks/bas/install-bas.yml","title":"BAS Playbook"},{"location":"playbooks/bas/#bas-playbooks","text":"","title":"BAS Playbooks"},{"location":"playbooks/bas/#install-bas","text":"Before you use this playbook you will likely want to edit the mas_config_dir variable to supply your own configurtation, instead of the sample data provided.","title":"Install BAS"},{"location":"playbooks/bas/#required-environment-variables","text":"BAS_PERSISTENT_STORAGE Storage Class To be used by BAS persistent storage BAS_META_STORAGE Storage Class To be used by BAS metadata storage BAS_PASSWORD Defines the password for your BAS instance GRAPHANA_PASSWORD Defines the password for BAS Graphana dashbaord BAS_CONTACT_MAIL Defines the email for person to contact for BAS BAS_CONTACT_FIRSTNAME Defines the first name of the person to contact for BAS BAS_CONTACT_LASTNAME Defines the last name of the person to contact for BAS","title":"Required environment variables"},{"location":"playbooks/bas/#optional-environment-variables","text":"BAS_USERNAME Defines the username for the BAS instance, default is basuser GRAPHANA_USERNAME Defines the username for the BAS Graphana instance, default is basuser BAS_NAMESPACE Defines the namespace where BAS will be installed in openshift, default is ibm-bas","title":"Optional environment variables"},{"location":"playbooks/bas/#usage","text":"export BAS_PERSISTENT_STORAGE=xxx export BAS_META_STORAGE=xxx export BAS_PASSWORD=xxx export GRAPHANA_PASSWORD=xxx export BAS_CONTACT_MAIL=xxx export BAS_CONTACT_FIRSTNAME=xxx export BAS_CONTACT_LASTNAME=xxx ansible-playbook playbooks/bas/install-bas.yml","title":"Usage:"},{"location":"playbooks/cp4d/","text":"CP4D Playbooks \uf0c1 These playbooks deploys Cloud Pak for Data from the IBM Operator Catalog using the v1.0 channel. Warning The credentials to sign-in are the defaults for CP4D, which are admin/password . Yes, really! Required environment variables \uf0c1 The following required environment variables are common across all of the playbooks: CPD_ENTITLEMENT_KEY An IBM entitlement key that includes access to Cloud Pak for Data 3.5.0 CPD_STORAGE_CLASS Provide the storage class to use for Db2 MAS_INSTANCE_ID Provide the MAS instance ID that will be used in any generated MAS configuration files Lite install \uf0c1 This playbook will only install CP4D, none of the Cloud Pak's supported services will be enabled allowing you to set these up seperately. Example usage \uf0c1 export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-lite.yml DB2 install \uf0c1 This playbook will install CP4D, with Db2 Warehouse and Db2 Management Console enabled. Additional a Db2 Warehouse cluster will be created and a public TLS encrypted route is configured to allow external access to the cluster. The certificates are available from the internal-tls secret in the cpd-meta-ops namespace. The default user is db2inst1 and the password is available in the instancepassword secret in the same namespace. You can examine the deployed resources in the cpd-meta-ops namespace: oc -n cpd-meta-ops get cpdservice,db2ucluster NAME MESSAGE REASON STATUS LASTACTION PHASE CODE cpdservice.metaoperator.cpd.ibm.com/cpdservice-db2wh Completed Ready CPDInstall Ready 0 cpdservice.metaoperator.cpd.ibm.com/cpdservice-db2wh-dmc CPD binary is running Installing CPDInstall Installing 1 NAME STATE AGE db2ucluster.db2u.databases.ibm.com/db2u-bludb NotReady 8m44s Tip The playbook will generate a yaml file containing the definition of a Secret and JdbcCfg resource that can be used to configure the deployed cluster as the MAS system JDBC datasource. This file can be directly applied using oc apply -f /tmp/jdbccfg-cp4ddb2wh-system.yaml or added to the mas_config list variable used by the ibm.mas_devops.suite_install role to deploy and configure MAS. Example usage \uf0c1 export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-db2.yml Debugging Db2 install \uf0c1 The following command may come in handy: oc -n cpd-meta-ops get formations.db2u.databases.ibm.com db2wh-db01 -o go-template='{{range .status.components}}{{printf \"%s,%s,%s\\n\" .kind .name .status.state}}{{end}}' | column -s, -t Watson Studio install \uf0c1 This playbook will install CP4D with Watson Studio and a number of additional components to expand the base capability of Watson Studio enabled. Watson Machine Learning As part of Watson Studio, Watson Machine Learning helps data scientists and developers accelerate AI and machine learning deployment. Apache Spark Apache Spark is a runtime environment configured inside of Watson Studio similar to a Python Runtime environment. When Spark is enabled from CP4D, you can opt to create a notebook and choose Spark as runtime to expand data modeling capabilities. Watson AI OpenScale Watson OpenScale enables tracking AI models in production, validation and test models to mitigate operational risks. For more information on how Predict and HP Utilities make use of Watson Studio, refer to Predict/HP Utilities documentation Application Support Predict requires Watson Studio, Machine Learning and Spark; Openscale is an optional dependency Health & Predict Utilities requires Watson Studio base capability only Example usage \uf0c1 export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-watsonstudio.yml Fullstack Install \uf0c1 This playbook will install CP4D, with all services that are supported by one or more applications in Maximo Application Suite enabled: Db2 Warehouse & Db2 Management Console Watson Studio with Watson Machine Learning , Apache Spark , & Watson AI OpenScale For more information refer to the documentation for the individual Db2 and Watson Studio playbooks above. Example usage \uf0c1 export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-fullstack.yml","title":"CP4D Playbooks"},{"location":"playbooks/cp4d/#cp4d-playbooks","text":"These playbooks deploys Cloud Pak for Data from the IBM Operator Catalog using the v1.0 channel. Warning The credentials to sign-in are the defaults for CP4D, which are admin/password . Yes, really!","title":"CP4D Playbooks"},{"location":"playbooks/cp4d/#required-environment-variables","text":"The following required environment variables are common across all of the playbooks: CPD_ENTITLEMENT_KEY An IBM entitlement key that includes access to Cloud Pak for Data 3.5.0 CPD_STORAGE_CLASS Provide the storage class to use for Db2 MAS_INSTANCE_ID Provide the MAS instance ID that will be used in any generated MAS configuration files","title":"Required environment variables"},{"location":"playbooks/cp4d/#lite-install","text":"This playbook will only install CP4D, none of the Cloud Pak's supported services will be enabled allowing you to set these up seperately.","title":"Lite install"},{"location":"playbooks/cp4d/#example-usage","text":"export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-lite.yml","title":"Example usage"},{"location":"playbooks/cp4d/#db2-install","text":"This playbook will install CP4D, with Db2 Warehouse and Db2 Management Console enabled. Additional a Db2 Warehouse cluster will be created and a public TLS encrypted route is configured to allow external access to the cluster. The certificates are available from the internal-tls secret in the cpd-meta-ops namespace. The default user is db2inst1 and the password is available in the instancepassword secret in the same namespace. You can examine the deployed resources in the cpd-meta-ops namespace: oc -n cpd-meta-ops get cpdservice,db2ucluster NAME MESSAGE REASON STATUS LASTACTION PHASE CODE cpdservice.metaoperator.cpd.ibm.com/cpdservice-db2wh Completed Ready CPDInstall Ready 0 cpdservice.metaoperator.cpd.ibm.com/cpdservice-db2wh-dmc CPD binary is running Installing CPDInstall Installing 1 NAME STATE AGE db2ucluster.db2u.databases.ibm.com/db2u-bludb NotReady 8m44s Tip The playbook will generate a yaml file containing the definition of a Secret and JdbcCfg resource that can be used to configure the deployed cluster as the MAS system JDBC datasource. This file can be directly applied using oc apply -f /tmp/jdbccfg-cp4ddb2wh-system.yaml or added to the mas_config list variable used by the ibm.mas_devops.suite_install role to deploy and configure MAS.","title":"DB2 install"},{"location":"playbooks/cp4d/#example-usage_1","text":"export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-db2.yml","title":"Example usage"},{"location":"playbooks/cp4d/#debugging-db2-install","text":"The following command may come in handy: oc -n cpd-meta-ops get formations.db2u.databases.ibm.com db2wh-db01 -o go-template='{{range .status.components}}{{printf \"%s,%s,%s\\n\" .kind .name .status.state}}{{end}}' | column -s, -t","title":"Debugging Db2 install"},{"location":"playbooks/cp4d/#watson-studio-install","text":"This playbook will install CP4D with Watson Studio and a number of additional components to expand the base capability of Watson Studio enabled. Watson Machine Learning As part of Watson Studio, Watson Machine Learning helps data scientists and developers accelerate AI and machine learning deployment. Apache Spark Apache Spark is a runtime environment configured inside of Watson Studio similar to a Python Runtime environment. When Spark is enabled from CP4D, you can opt to create a notebook and choose Spark as runtime to expand data modeling capabilities. Watson AI OpenScale Watson OpenScale enables tracking AI models in production, validation and test models to mitigate operational risks. For more information on how Predict and HP Utilities make use of Watson Studio, refer to Predict/HP Utilities documentation Application Support Predict requires Watson Studio, Machine Learning and Spark; Openscale is an optional dependency Health & Predict Utilities requires Watson Studio base capability only","title":"Watson Studio install"},{"location":"playbooks/cp4d/#example-usage_2","text":"export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-watsonstudio.yml","title":"Example usage"},{"location":"playbooks/cp4d/#fullstack-install","text":"This playbook will install CP4D, with all services that are supported by one or more applications in Maximo Application Suite enabled: Db2 Warehouse & Db2 Management Console Watson Studio with Watson Machine Learning , Apache Spark , & Watson AI OpenScale For more information refer to the documentation for the individual Db2 and Watson Studio playbooks above.","title":"Fullstack Install"},{"location":"playbooks/cp4d/#example-usage_3","text":"export CPD_ENTITLEMENT_KEY=xxx export CPD_STORAGE_CLASS=ibmc-file-gold-gid export MAS_INSTANCE_ID=inst1 ansible-playbook playbooks/cp4d/install-fullstack.yml","title":"Example usage"},{"location":"playbooks/dependencies/","text":"Depedencies Playbooks \uf0c1 Install AMQ Streams \uf0c1 Required environment variables \uf0c1 KAFKA_STORAGE_CLASS sets the storage class to use for both Kafka and Zookeeper MAS_INSTANCE_ID sets the instance ID of the MAS install that we are configuring Optional environment variables \uf0c1 KAFKA_NAMESPACE overrides the Kubernetes namespace where the AMQ streams operator will be installed, this will default to amq-streams KAFKA_CLUSER_NAME overrides the name Kafka cluster, this will default maskafka KAFKA_CLUSTER_SIZE provides a choice between a small and large cluster configuration, this will default to small KAFKA_USER_NAME configures the user that will be created for MAS, will default to masuser Example usage \uf0c1 AMQ Streams operator will be installed into the amq-streams namespace, a cluster named maskafka will be created using the small configuration and ibmc-block-gold as the storage class. export KAFKA_STORAGE_CLASS=ibmc-block-gold export MAS_INSTANCE_ID=masdev1 ansible-playbook playbooks/dependencies/install-amqstreams.yml Tip The playbook will generate a yaml file containing the definition of a Secret and KafkaCfg resource that can be used to configure the deployed cluster as the MAS system Kafka. This file can be directly applied using oc apply -f /tmp/kafkacfg-amqstreams-system.yaml or added to the mas_config list variable used by the ibm.mas_devops.suite_install role to deploy and configure MAS. Install MongoDb (CE) \uf0c1 Required environment variables \uf0c1 MAS_INSTANCE_ID sets the instance ID of the MAS install that we are configuring Optional environment variables \uf0c1 MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce Example usage \uf0c1 MongoDb CE operator will be installed into the mongoce namespace, a 3 node cluster cluster will be created. The cluster will bind six 20GB PVCs of the default storage class, these provide persistence for the data and system logs across the three nodes. export MAS_INSTANCE_ID=masdev1 ansible-playbook playbooks/dependencies/install-mongodb-ce.yml Tip The playbook will generate a yaml file containing the definition of a Secret and MongoCfg resource that can be used to configure the deployed instance as the MAS system MongoDb. This file can be directly applied using oc apply -f /tmp/mongocfg-mongoce-system.yaml or added to the mas_config list variable used by the ibm.mas_devops.suite_install role to deploy and configure MAS.","title":"Dependencies Playbooks"},{"location":"playbooks/dependencies/#depedencies-playbooks","text":"","title":"Depedencies Playbooks"},{"location":"playbooks/dependencies/#install-amq-streams","text":"","title":"Install AMQ Streams"},{"location":"playbooks/dependencies/#required-environment-variables","text":"KAFKA_STORAGE_CLASS sets the storage class to use for both Kafka and Zookeeper MAS_INSTANCE_ID sets the instance ID of the MAS install that we are configuring","title":"Required environment variables"},{"location":"playbooks/dependencies/#optional-environment-variables","text":"KAFKA_NAMESPACE overrides the Kubernetes namespace where the AMQ streams operator will be installed, this will default to amq-streams KAFKA_CLUSER_NAME overrides the name Kafka cluster, this will default maskafka KAFKA_CLUSTER_SIZE provides a choice between a small and large cluster configuration, this will default to small KAFKA_USER_NAME configures the user that will be created for MAS, will default to masuser","title":"Optional environment variables"},{"location":"playbooks/dependencies/#example-usage","text":"AMQ Streams operator will be installed into the amq-streams namespace, a cluster named maskafka will be created using the small configuration and ibmc-block-gold as the storage class. export KAFKA_STORAGE_CLASS=ibmc-block-gold export MAS_INSTANCE_ID=masdev1 ansible-playbook playbooks/dependencies/install-amqstreams.yml Tip The playbook will generate a yaml file containing the definition of a Secret and KafkaCfg resource that can be used to configure the deployed cluster as the MAS system Kafka. This file can be directly applied using oc apply -f /tmp/kafkacfg-amqstreams-system.yaml or added to the mas_config list variable used by the ibm.mas_devops.suite_install role to deploy and configure MAS.","title":"Example usage"},{"location":"playbooks/dependencies/#install-mongodb-ce","text":"","title":"Install MongoDb (CE)"},{"location":"playbooks/dependencies/#required-environment-variables_1","text":"MAS_INSTANCE_ID sets the instance ID of the MAS install that we are configuring","title":"Required environment variables"},{"location":"playbooks/dependencies/#optional-environment-variables_1","text":"MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce","title":"Optional environment variables"},{"location":"playbooks/dependencies/#example-usage_1","text":"MongoDb CE operator will be installed into the mongoce namespace, a 3 node cluster cluster will be created. The cluster will bind six 20GB PVCs of the default storage class, these provide persistence for the data and system logs across the three nodes. export MAS_INSTANCE_ID=masdev1 ansible-playbook playbooks/dependencies/install-mongodb-ce.yml Tip The playbook will generate a yaml file containing the definition of a Secret and MongoCfg resource that can be used to configure the deployed instance as the MAS system MongoDb. This file can be directly applied using oc apply -f /tmp/mongocfg-mongoce-system.yaml or added to the mas_config list variable used by the ibm.mas_devops.suite_install role to deploy and configure MAS.","title":"Example usage"},{"location":"playbooks/fullstack-roks/","text":"Full Stack on IBM Cloud \uf0c1 This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install Kafka (AMQ Streams) (10 minutes) Install Cloud Pak for Data Operator (2 minutes) Install Cloud Pak for Data Services Db2 Warehouse with Db2 Management Console (1-2 hours) Watson Studio with Apache Spark , Watson Machine Learning , & Watson AI OpenScale (4-5 hours) Create Db2 Warehouse Cluster (60 minutes) Additional Db2 configuration for Manage Install Cloud Object Storage (coming soon) Install BAS (coming soon) Install SLS (10 minutes) Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (20 minutes) Install Gen2 applications: Install & configure Manage Install & configure IoT (coming soon) Install & configure Assist (due 3Q) Install & configure Predict (due 3Q) Install & configure HP Utilties (due 3Q) Install & configure Safety (due 3Q) Install & configure Visual Inspection (due 3Q) Install & configure Monitor (due ??) All timings are estimates, see the individual pages for each of these playbooks for more information. Gen1 applications will not be supported by this collection. Warning The install time for Cloud Pak for Data with all the services supported by MAS enabled is considerable. Unfortunately this is out of our control, plan accordingly! Also note that Cloud Pak for Data requires approximately 40 PVCs. You may need to contact IBM to increase the quota assigned to your IBM Cloud account if you see PVCs stuck in pending state and this error message: \"Your order will exceed the maximum number of storage volumes allowed. Please contact Sales\" Warning Db2 in CP4D is currently broken, the db2u pod will never start due to an incorrectly set tty setting. See this Slack thread for more details. Depending how long the CP4D team takes to resolve this problem, we may need to automate the workaround (patch the pod to set tty to false, but only after it reaches a certain point in it's processing). In the meantime, you must manually intervene, otherwise the playbook will timeout waiting for the Db2 cluster to be ready. Required environment variables \uf0c1 IBMCLOUD_APIKEY CLUSTER_NAME CPD_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here) Optional environment variables \uf0c1 IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS KAFKA_CLUSTER_SIZE to override the default configuration used (small) MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables. Release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Kafka configuration export KAFKA_CLUSTER_SIZE=large # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/fullstack-roks.yml Note Lookup your entitlement keys from the IBM Container Library Pre-release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Kafka configuration export KAFKA_CLUSTER_SIZE=small # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/fullstack-roks.yml","title":"IBM Cloud"},{"location":"playbooks/fullstack-roks/#full-stack-on-ibm-cloud","text":"This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install Kafka (AMQ Streams) (10 minutes) Install Cloud Pak for Data Operator (2 minutes) Install Cloud Pak for Data Services Db2 Warehouse with Db2 Management Console (1-2 hours) Watson Studio with Apache Spark , Watson Machine Learning , & Watson AI OpenScale (4-5 hours) Create Db2 Warehouse Cluster (60 minutes) Additional Db2 configuration for Manage Install Cloud Object Storage (coming soon) Install BAS (coming soon) Install SLS (10 minutes) Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (20 minutes) Install Gen2 applications: Install & configure Manage Install & configure IoT (coming soon) Install & configure Assist (due 3Q) Install & configure Predict (due 3Q) Install & configure HP Utilties (due 3Q) Install & configure Safety (due 3Q) Install & configure Visual Inspection (due 3Q) Install & configure Monitor (due ??) All timings are estimates, see the individual pages for each of these playbooks for more information. Gen1 applications will not be supported by this collection. Warning The install time for Cloud Pak for Data with all the services supported by MAS enabled is considerable. Unfortunately this is out of our control, plan accordingly! Also note that Cloud Pak for Data requires approximately 40 PVCs. You may need to contact IBM to increase the quota assigned to your IBM Cloud account if you see PVCs stuck in pending state and this error message: \"Your order will exceed the maximum number of storage volumes allowed. Please contact Sales\" Warning Db2 in CP4D is currently broken, the db2u pod will never start due to an incorrectly set tty setting. See this Slack thread for more details. Depending how long the CP4D team takes to resolve this problem, we may need to automate the workaround (patch the pod to set tty to false, but only after it reaches a certain point in it's processing). In the meantime, you must manually intervene, otherwise the playbook will timeout waiting for the Db2 cluster to be ready.","title":"Full Stack on IBM Cloud"},{"location":"playbooks/fullstack-roks/#required-environment-variables","text":"IBMCLOUD_APIKEY CLUSTER_NAME CPD_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here)","title":"Required environment variables"},{"location":"playbooks/fullstack-roks/#optional-environment-variables","text":"IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS KAFKA_CLUSTER_SIZE to override the default configuration used (small) MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables.","title":"Optional environment variables"},{"location":"playbooks/fullstack-roks/#release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Kafka configuration export KAFKA_CLUSTER_SIZE=large # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/fullstack-roks.yml Note Lookup your entitlement keys from the IBM Container Library","title":"Release build"},{"location":"playbooks/fullstack-roks/#pre-release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Kafka configuration export KAFKA_CLUSTER_SIZE=small # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/fullstack-roks.yml","title":"Pre-release build"},{"location":"playbooks/lite-core-quickburn/","text":"MAS Core Service on DevIT Quickburn \uf0c1 This master playbook will drive the following playbooks in sequence: Provision & setup Quickburn (25 minutes) Install dependencies: Install MongoDb (15 minutes) Install BAS (coming soon) Install SLS (10 minutes) Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (25 minutes) All timings are estimates, see the individual pages for each of these playbooks for more information. Due to the size limtations of QuickBurn clusters a full MAS stack is not possible. Required environment variables \uf0c1 FYRE_USERNAME FYRE_APIKEY FYRE_PRODUCT_ID CLUSTER_NAME OCP_VERSION MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here) Optional environment variables \uf0c1 FYRE_CLUSTER_SIZE W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables. Release build \uf0c1 # Fyre credentials export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 # Cluster configuration export CLUSTER_NAME=xxx export OCP_VERSION=4.6.16 # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-core-quickburn.yml Note Lookup your entitlement keys from the IBM Container Library Pre-release build \uf0c1 # Fyre credentials export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 # Cluster configuration export CLUSTER_NAME=xxx export OCP_VERSION=4.6.16 # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=xxx export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-core-quickburn.yml AirGap Support \uf0c1 This sample playbook supports AirGap install of MAS itself, but not the dependency stack for MAS; everything else will be installed normally. Refer to The MAS playbook documentation for full details of how to enable AirGap mode.","title":"Core only on QuickBurn"},{"location":"playbooks/lite-core-quickburn/#mas-core-service-on-devit-quickburn","text":"This master playbook will drive the following playbooks in sequence: Provision & setup Quickburn (25 minutes) Install dependencies: Install MongoDb (15 minutes) Install BAS (coming soon) Install SLS (10 minutes) Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (25 minutes) All timings are estimates, see the individual pages for each of these playbooks for more information. Due to the size limtations of QuickBurn clusters a full MAS stack is not possible.","title":"MAS Core Service on DevIT Quickburn"},{"location":"playbooks/lite-core-quickburn/#required-environment-variables","text":"FYRE_USERNAME FYRE_APIKEY FYRE_PRODUCT_ID CLUSTER_NAME OCP_VERSION MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here)","title":"Required environment variables"},{"location":"playbooks/lite-core-quickburn/#optional-environment-variables","text":"FYRE_CLUSTER_SIZE W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables.","title":"Optional environment variables"},{"location":"playbooks/lite-core-quickburn/#release-build","text":"# Fyre credentials export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 # Cluster configuration export CLUSTER_NAME=xxx export OCP_VERSION=4.6.16 # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-core-quickburn.yml Note Lookup your entitlement keys from the IBM Container Library","title":"Release build"},{"location":"playbooks/lite-core-quickburn/#pre-release-build","text":"# Fyre credentials export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 # Cluster configuration export CLUSTER_NAME=xxx export OCP_VERSION=4.6.16 # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=xxx export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-core-quickburn.yml","title":"Pre-release build"},{"location":"playbooks/lite-core-quickburn/#airgap-support","text":"This sample playbook supports AirGap install of MAS itself, but not the dependency stack for MAS; everything else will be installed normally. Refer to The MAS playbook documentation for full details of how to enable AirGap mode.","title":"AirGap Support"},{"location":"playbooks/lite-core-roks/","text":"MAS Core Service on IBM Cloud ROKS \uf0c1 This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install BAS (coming soon) Install SLS (10 minutes) Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (25 minutes) All timings are estimates, see the individual pages for each of these playbooks for more information. Required environment variables \uf0c1 IBMCLOUD_APIKEY CLUSTER_NAME MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here) Optional environment variables \uf0c1 IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables. Release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/only-manage-roks.yml Pre-release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/only-manageroks.yml","title":"Core only on IBM Cloud"},{"location":"playbooks/lite-core-roks/#mas-core-service-on-ibm-cloud-roks","text":"This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install BAS (coming soon) Install SLS (10 minutes) Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (25 minutes) All timings are estimates, see the individual pages for each of these playbooks for more information.","title":"MAS Core Service on IBM Cloud ROKS"},{"location":"playbooks/lite-core-roks/#required-environment-variables","text":"IBMCLOUD_APIKEY CLUSTER_NAME MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here)","title":"Required environment variables"},{"location":"playbooks/lite-core-roks/#optional-environment-variables","text":"IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables.","title":"Optional environment variables"},{"location":"playbooks/lite-core-roks/#release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/only-manage-roks.yml","title":"Release build"},{"location":"playbooks/lite-core-roks/#pre-release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/only-manageroks.yml","title":"Pre-release build"},{"location":"playbooks/lite-health-roks/","text":"MAS Core with Health on IBM Cloud \uf0c1 This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install Cloud Pak for Data Operator (2 minutes) Install Cloud Pak for Data Services Db2 Warehouse with Db2 Management Console (1-2 hours) Create Db2 Warehouse Cluster (60 minutes) Additional Db2 configuration for Manage Install BAS (30 minutes) Install SLS Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (20 minutes) Install Health Install application Configure workspace All timings are estimates, see the individual pages for each of these playbooks for more information. Warning Db2 in CP4D is currently broken, the db2u pod will never start due to an incorrectly set tty setting. See this Slack thread for more details. Depending how long the CP4D team takes to resolve this problem, we may need to automate the workaround (patch the pod to set tty to false, but only after it reaches a certain point in it's processing). In the meantime, you must manually intervene, otherwise the playbook will timeout waiting for the Db2 cluster to be ready. Required environment variables \uf0c1 IBMCLOUD_APIKEY CLUSTER_NAME CPD_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here) Optional environment variables \uf0c1 IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables. Release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-health-roks.yml Pre-release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-health-roks.yml","title":"Health on IBM Cloud"},{"location":"playbooks/lite-health-roks/#mas-core-with-health-on-ibm-cloud","text":"This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install Cloud Pak for Data Operator (2 minutes) Install Cloud Pak for Data Services Db2 Warehouse with Db2 Management Console (1-2 hours) Create Db2 Warehouse Cluster (60 minutes) Additional Db2 configuration for Manage Install BAS (30 minutes) Install SLS Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (20 minutes) Install Health Install application Configure workspace All timings are estimates, see the individual pages for each of these playbooks for more information. Warning Db2 in CP4D is currently broken, the db2u pod will never start due to an incorrectly set tty setting. See this Slack thread for more details. Depending how long the CP4D team takes to resolve this problem, we may need to automate the workaround (patch the pod to set tty to false, but only after it reaches a certain point in it's processing). In the meantime, you must manually intervene, otherwise the playbook will timeout waiting for the Db2 cluster to be ready.","title":"MAS Core with Health on IBM Cloud"},{"location":"playbooks/lite-health-roks/#required-environment-variables","text":"IBMCLOUD_APIKEY CLUSTER_NAME CPD_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here)","title":"Required environment variables"},{"location":"playbooks/lite-health-roks/#optional-environment-variables","text":"IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables.","title":"Optional environment variables"},{"location":"playbooks/lite-health-roks/#release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-health-roks.yml","title":"Release build"},{"location":"playbooks/lite-health-roks/#pre-release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-health-roks.yml","title":"Pre-release build"},{"location":"playbooks/lite-manage-roks/","text":"MAS Core with Manage on IBM Cloud \uf0c1 This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install Cloud Pak for Data Operator (2 minutes) Install Cloud Pak for Data Services Db2 Warehouse with Db2 Management Console (1-2 hours) Create Db2 Warehouse Cluster (60 minutes) Additional Db2 configuration for Manage Install BAS (30 minutes) Install SLS Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (20 minutes) Install Manage Install application Configure workspace All timings are estimates, see the individual pages for each of these playbooks for more information. Warning There is a known problem with Manage v8.1.0 that will result in the system being unusable following a successful deployment. Refer to the following technote for more information: \"OpenID Connect client returned with status: SEND_401\" when logging in to Manage after installation Required environment variables \uf0c1 IBMCLOUD_APIKEY CLUSTER_NAME CPD_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here) Optional environment variables \uf0c1 IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables. Release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-manage-roks.yml Pre-release build \uf0c1 # IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-manage-roks.yml","title":"Manage on IBM Cloud"},{"location":"playbooks/lite-manage-roks/#mas-core-with-manage-on-ibm-cloud","text":"This master playbook will drive the following playbooks in sequence: Provision & setup OCP on IBM Cloud (20-30 minutes) Install dependencies: Install MongoDb (Community Edition) (15 minutes) Install Cloud Pak for Data Operator (2 minutes) Install Cloud Pak for Data Services Db2 Warehouse with Db2 Management Console (1-2 hours) Create Db2 Warehouse Cluster (60 minutes) Additional Db2 configuration for Manage Install BAS (30 minutes) Install SLS Install & configure MAS: Configure Cloud Internet Services integration (Optional, 1 minute) Install & configure MAS (20 minutes) Install Manage Install application Configure workspace All timings are estimates, see the individual pages for each of these playbooks for more information. Warning There is a known problem with Manage v8.1.0 that will result in the system being unusable following a successful deployment. Refer to the following technote for more information: \"OpenID Connect client returned with status: SEND_401\" when logging in to Manage after installation","title":"MAS Core with Manage on IBM Cloud"},{"location":"playbooks/lite-manage-roks/#required-environment-variables","text":"IBMCLOUD_APIKEY CLUSTER_NAME CPD_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Lookup your entitlement key from the IBM Container Library MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here)","title":"Required environment variables"},{"location":"playbooks/lite-manage-roks/#optional-environment-variables","text":"IBMCLOUD_RESOURCEGROUP creates an IBM Cloud resource group to be used, if none are passed, Default resource group will be used. OCP_VERSION to override the default version of OCP to use (latest 4.6 release) W3_USERNAME to enable access to pre-release development builds of MAS ARTIFACTORY_APIKEY to enable access to pre-release development builds of MAS MONGODB_NAMESPACE overrides the Kubernetes namespace where the MongoDb CE operator will be installed, this will default to mongoce MAS_CATALOG_SOURCE to override the use of the IBM Operator Catalog as the catalog source MAS_CHANNEL to override the use of the 8.x channel MAS_DOMAIN to set a custom domain for the MAS installation MAS_ICR_CP to override the value MAS uses for the IBM Entitled Registry ( cp.icr.io/cp ) MAS_ICR_CPOPEN to override the value MAS uses for the IBM Open Registry ( icr.io/cpopen ) MAS_ENTITLEMENT_USERNAME to override the username MAS uses to access content in the IBM Entitled Registry CIS_CRN to enable integration with IBM Cloud Internet Services (CIS) for DNS & certificate management CIS_SUBDOMAIN if you want to use a subdomain within your CIS instance Tip MAS_ICR_CP , MAS_ICR_CPOPEN , & MAS_ENTITLEMENT_USERNAME are primarily used when working with pre-release builds in conjunction with W3_USERNAME , ARTIFACTORY_APIKEY and the MAS_CATALOG_SOURCE environment variables.","title":"Optional environment variables"},{"location":"playbooks/lite-manage-roks/#release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-manage-roks.yml","title":"Release build"},{"location":"playbooks/lite-manage-roks/#pre-release-build","text":"# IBM Cloud ROKS configuration export IBMCLOUD_APIKEY=xxx export CLUSTER_NAME=xxx # CP4D configuration export CPD_ENTITLEMENT_KEY=xxx # Allow development catalogs to be installed export W3_USERNAME=xxx export ARTIFACTORY_APIKEY=xxx # MAS configuration export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=$CLUSTER_NAME export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/lite-manage-roks.yml","title":"Pre-release build"},{"location":"playbooks/mas/","text":"MAS Playbooks \uf0c1 Install MAS \uf0c1 Before you use this playbook you will likely want to edit the mas_config variable to supply your own configurtation, instead of the sample data provided. Required environment variables \uf0c1 MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Provide your IBM entitlement key MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here) Optional environment variables \uf0c1 MAS_CATALOG_SOURCE Set to ibm-mas-operators if you want to deploy pre-release development builds MAS_CHANNEL Override the default release channel (8.x) MAS_DOMAIN Override the default generated domain for the MAS installation MAS_ICR_CP Override the registry source for all container images deployed by the MAS operator MAS_ICR_CPOPEN Override the registry source for all container images deployed by the MAS operator MAS_ENTITLEMENT_USERNAME Override the default entitlement username (cp) Example usage: release build \uf0c1 export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx ansible-playbook playbooks/mas/install-suite.yml Note Lookup your entitlement key from the IBM Container Library Example usage: pre-release build \uf0c1 export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=xxx export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/mas/install-suite.yml Important You must have already installed the development (pre-release) catalogs, pre-release builds are not available directly from the IBM Operator Catalog. Cloud Internet Services integration \uf0c1 This optional feature allows you to integrate MAS with an existing instance of IBM Cloud Internet Services (CIS) to provide automatic DNS management and certificates signed by LetsEncrypt. To utilise this feature you must set the optional MAS_DOMAIN detailed previously, and define additional CIS-specific environment variables as follows. Required environment variables \uf0c1 CIS_CRN which can be obtained from your CIS service overview page, it will be in the format: crn:v1:bluemix:public:internet-svcs:global:a/02fd888448c1415baa2bcd65684e4db3:9969652f-6955-482b-b59c-asdasasdede50c:: IBMCLOUD_APIKEY Your IBM Cloud API key with DNS API write access. Note: (This API key will be stored in your cluster for DNS challenge when requesting new certs) TODO Support CIS_APIKEY instead as we don't really want to re-use the main IBMCLOUD_APIKEY API key as it has too wide scope for CIS. Document what scope to set up the API key with and what steps etc. Could we even use our API key to create this new API key automatically so that the user does not need to do anything? Optional environment variables \uf0c1 CIS_SUBDOMAIN Subdomain used by your DNS server. It allow you to reuse CIS for multiple MAS Instances. CIS_SKIP_DNS_ENTRIES Skips DNS entries creation if you are have them CIS_SKIP_CLUSTER_ISSUER Skips Cluster Issuer CR creation and CIS webhook installation if you already have it UPDATE_DNS_ENTRIES Whether to replace DNS entries already created OCP_INGRESS Default to your cluster OCP ingress. This value is used as the target for the DNS entries Example \uf0c1 This example will configure MAS to run under the domain mas.internal.mydomain.com with all DNS entries for MAS managed by a CIS instance controlling mydomain.com . export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_DOMAIN=mas.internal.mydomain.com # Configure CIS integration export IBMCLOUD_APIKEY=xxx export CIS_SUBDOMAIN=mas.internal export CIS_CRN=crn:v1:bluemix:public:internet-svcs:global:a/02fd888448c1415baa2bcd65684e4db3:9969652f-6955-482b-b59c-asdasasdede50c:: ansible-playbook playbooks/mas/install-suite.yml AirGap Support \uf0c1 Additional environment variables \uf0c1 AIRGAP_INSTALL - flag to enable airgap install CASE_NAME - the name of the CASE bundle to be installed CASE_BUNDLE_DIR - the location of the CASE bundle to be installed CASE_INV_NAME - the name of the Setup inventory within the CASE bundle CASE_SOURCE Optional URL of the case bundle archive to download - must be .tgz format CP_ICR_ENTITLEMENT_KEY to mirror images from ICR - lookup your entitlement key from the IBM Container Library MAS_CATALOG_IMG - a digest reference to the MAS catalog image TM_CATALOG_IMG - digest reference to the Trustore Manager catalog image Example \uf0c1 # Fyre credentials export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 # Cluster configuration export CLUSTER_NAME=xxx export OCP_VERSION=4.6.38 # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig # Airgap config export AIRGAP_INSTALL=true export CASE_NAME=ibm-mas export CASE_BUNDLE_DIR=XXX/ibm-mas-case/stable/ibm-mas-bundle/ export CASE_INV_NAME=ibmMasSetup export CASE_SOURCE=https://github.com/IBM/cloud-pak/blob/master/repo/case/ibm-mas/8.5.0/ibm-mas-8.5.0.tgz?raw=true export MAS_CATALOG_IMG=icr.io/cpopen/ibm-mas-operator-catalog@sha256:822e4840748737a012a94997c202eeb160107dc5adb7c2a40d42aa087ceb41b1 export TM_CATALOG_IMG=icr.io/cpopen/ibm-truststore-mgr-operator-catalog@sha256:56d5af1b31637c318edef4522d4bd215425ac43a4fe0056adac504577ca21f3e export CP_ICR_ENTITLEMENT_KEY=XXX ansible-playbook playbooks/mas/install-mas.yml Install MAS Application \uf0c1 Install a MAS (Gen2) application, supported applications: Manage Health Note Today, this only supports deployment of a MAS application with default settings. Example \uf0c1 export MAS_INSTANCE_ID=xxx export MAS_WORKSPACE_ID=masdev export MAS_APP_ID=manage ansible-playbook playbooks/mas/configure-app.yml Configure MAS Application \uf0c1 Configure a MAS (Gen2) application in a workspace, supported applications: Manage Health Note Today, this only supports configuring a workspace with default settings. Example \uf0c1 export MAS_INSTANCE_ID=xxx export MAS_WORKSPACE_ID=masdev export MAS_APP_ID=manage ansible-playbook playbooks/mas/configure-app.yml Manage Db2 Hack \uf0c1 This should should be part of the Manage operator, but is not so we have to do it as a seperate step in the install flow for now. This will configure the Db2 database instance and create a new schema named maximo (the default schema name used by the Manage application). ansible-playbook playbooks/mas/hack-manage-db2.yml","title":"MAS Playbooks"},{"location":"playbooks/mas/#mas-playbooks","text":"","title":"MAS Playbooks"},{"location":"playbooks/mas/#install-mas","text":"Before you use this playbook you will likely want to edit the mas_config variable to supply your own configurtation, instead of the sample data provided.","title":"Install MAS"},{"location":"playbooks/mas/#required-environment-variables","text":"MAS_INSTANCE_ID Declare the instance ID for the MAS install MAS_ENTITLEMENT_KEY Provide your IBM entitlement key MAS_CONFIG_DIR Directory where generated config files will be saved (you may also provide pre-generated config files here)","title":"Required environment variables"},{"location":"playbooks/mas/#optional-environment-variables","text":"MAS_CATALOG_SOURCE Set to ibm-mas-operators if you want to deploy pre-release development builds MAS_CHANNEL Override the default release channel (8.x) MAS_DOMAIN Override the default generated domain for the MAS installation MAS_ICR_CP Override the registry source for all container images deployed by the MAS operator MAS_ICR_CPOPEN Override the registry source for all container images deployed by the MAS operator MAS_ENTITLEMENT_USERNAME Override the default entitlement username (cp)","title":"Optional environment variables"},{"location":"playbooks/mas/#example-usage-release-build","text":"export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx ansible-playbook playbooks/mas/install-suite.yml Note Lookup your entitlement key from the IBM Container Library","title":"Example usage: release build"},{"location":"playbooks/mas/#example-usage-pre-release-build","text":"export MAS_CATALOG_SOURCE=ibm-mas-operators export MAS_CHANNEL=8.5.0-pre.m2dev85 export MAS_INSTANCE_ID=xxx export MAS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export MAS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export MAS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export MAS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export MAS_CONFIG_DIR=~/masconfig ansible-playbook playbooks/mas/install-suite.yml Important You must have already installed the development (pre-release) catalogs, pre-release builds are not available directly from the IBM Operator Catalog.","title":"Example usage: pre-release build"},{"location":"playbooks/mas/#cloud-internet-services-integration","text":"This optional feature allows you to integrate MAS with an existing instance of IBM Cloud Internet Services (CIS) to provide automatic DNS management and certificates signed by LetsEncrypt. To utilise this feature you must set the optional MAS_DOMAIN detailed previously, and define additional CIS-specific environment variables as follows.","title":"Cloud Internet Services integration"},{"location":"playbooks/mas/#required-environment-variables_1","text":"CIS_CRN which can be obtained from your CIS service overview page, it will be in the format: crn:v1:bluemix:public:internet-svcs:global:a/02fd888448c1415baa2bcd65684e4db3:9969652f-6955-482b-b59c-asdasasdede50c:: IBMCLOUD_APIKEY Your IBM Cloud API key with DNS API write access. Note: (This API key will be stored in your cluster for DNS challenge when requesting new certs) TODO Support CIS_APIKEY instead as we don't really want to re-use the main IBMCLOUD_APIKEY API key as it has too wide scope for CIS. Document what scope to set up the API key with and what steps etc. Could we even use our API key to create this new API key automatically so that the user does not need to do anything?","title":"Required environment variables"},{"location":"playbooks/mas/#optional-environment-variables_1","text":"CIS_SUBDOMAIN Subdomain used by your DNS server. It allow you to reuse CIS for multiple MAS Instances. CIS_SKIP_DNS_ENTRIES Skips DNS entries creation if you are have them CIS_SKIP_CLUSTER_ISSUER Skips Cluster Issuer CR creation and CIS webhook installation if you already have it UPDATE_DNS_ENTRIES Whether to replace DNS entries already created OCP_INGRESS Default to your cluster OCP ingress. This value is used as the target for the DNS entries","title":"Optional environment variables"},{"location":"playbooks/mas/#example","text":"This example will configure MAS to run under the domain mas.internal.mydomain.com with all DNS entries for MAS managed by a CIS instance controlling mydomain.com . export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_DOMAIN=mas.internal.mydomain.com # Configure CIS integration export IBMCLOUD_APIKEY=xxx export CIS_SUBDOMAIN=mas.internal export CIS_CRN=crn:v1:bluemix:public:internet-svcs:global:a/02fd888448c1415baa2bcd65684e4db3:9969652f-6955-482b-b59c-asdasasdede50c:: ansible-playbook playbooks/mas/install-suite.yml","title":"Example"},{"location":"playbooks/mas/#airgap-support","text":"","title":"AirGap Support"},{"location":"playbooks/mas/#additional-environment-variables","text":"AIRGAP_INSTALL - flag to enable airgap install CASE_NAME - the name of the CASE bundle to be installed CASE_BUNDLE_DIR - the location of the CASE bundle to be installed CASE_INV_NAME - the name of the Setup inventory within the CASE bundle CASE_SOURCE Optional URL of the case bundle archive to download - must be .tgz format CP_ICR_ENTITLEMENT_KEY to mirror images from ICR - lookup your entitlement key from the IBM Container Library MAS_CATALOG_IMG - a digest reference to the MAS catalog image TM_CATALOG_IMG - digest reference to the Trustore Manager catalog image","title":"Additional environment variables"},{"location":"playbooks/mas/#example_1","text":"# Fyre credentials export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 # Cluster configuration export CLUSTER_NAME=xxx export OCP_VERSION=4.6.38 # MAS configuration export MAS_INSTANCE_ID=xxx export MAS_ENTITLEMENT_KEY=xxx export MAS_CONFIG_DIR=~/masconfig # Airgap config export AIRGAP_INSTALL=true export CASE_NAME=ibm-mas export CASE_BUNDLE_DIR=XXX/ibm-mas-case/stable/ibm-mas-bundle/ export CASE_INV_NAME=ibmMasSetup export CASE_SOURCE=https://github.com/IBM/cloud-pak/blob/master/repo/case/ibm-mas/8.5.0/ibm-mas-8.5.0.tgz?raw=true export MAS_CATALOG_IMG=icr.io/cpopen/ibm-mas-operator-catalog@sha256:822e4840748737a012a94997c202eeb160107dc5adb7c2a40d42aa087ceb41b1 export TM_CATALOG_IMG=icr.io/cpopen/ibm-truststore-mgr-operator-catalog@sha256:56d5af1b31637c318edef4522d4bd215425ac43a4fe0056adac504577ca21f3e export CP_ICR_ENTITLEMENT_KEY=XXX ansible-playbook playbooks/mas/install-mas.yml","title":"Example"},{"location":"playbooks/mas/#install-mas-application","text":"Install a MAS (Gen2) application, supported applications: Manage Health Note Today, this only supports deployment of a MAS application with default settings.","title":"Install MAS Application"},{"location":"playbooks/mas/#example_2","text":"export MAS_INSTANCE_ID=xxx export MAS_WORKSPACE_ID=masdev export MAS_APP_ID=manage ansible-playbook playbooks/mas/configure-app.yml","title":"Example"},{"location":"playbooks/mas/#configure-mas-application","text":"Configure a MAS (Gen2) application in a workspace, supported applications: Manage Health Note Today, this only supports configuring a workspace with default settings.","title":"Configure MAS Application"},{"location":"playbooks/mas/#example_3","text":"export MAS_INSTANCE_ID=xxx export MAS_WORKSPACE_ID=masdev export MAS_APP_ID=manage ansible-playbook playbooks/mas/configure-app.yml","title":"Example"},{"location":"playbooks/mas/#manage-db2-hack","text":"This should should be part of the Manage operator, but is not so we have to do it as a seperate step in the install flow for now. This will configure the Db2 database instance and create a new schema named maximo (the default schema name used by the Manage application). ansible-playbook playbooks/mas/hack-manage-db2.yml","title":"Manage Db2 Hack"},{"location":"playbooks/ocp/","text":"OCP Playbooks \uf0c1 ROKS \uf0c1 Provide intro ... Required environment variables \uf0c1 IBMCLOUD_APIKEY Short statement CLUSTER_NAME Short statement OCP_VERSION Short statement Optional environment variables \uf0c1 ROKS_ZONE Short statement ROKS_FLAVOR Short statement ROKS_WORKERS Short statement ROKS_FLAGS Short statement W3_USERNAME This is required if you want to install the pre-release MAS operator catalogs ARTIFACTORY_APIKEY This is required if you want to install the pre-release MAS operator catalogs Provision \uf0c1 As part of provisioning on IBM Cloud: The IBM operator catalog will be installed MAS development catalogs will be installed if W3_USERNAME and ARTIFACTORY_APIKEY environment variables are both defined Certificate manager and service binding operators will be installed at cluster scope Monitoring for user-defined projects will be enabled in the cluster export VAR_NAME=xxx export VAR_NAME=xxx ansible-playbook playbooks/ocp/provision-roks.yml Deprovision \uf0c1 export VAR_NAME=xxx export VAR_NAME=xxx ansible-playbook playbooks/ocp/deprovision-roks.yml QuickBurn \uf0c1 Provide intro ... Required environment variables \uf0c1 FYRE_USERNAME Short statement FYRE_APIKEY Short statement FYRE_PRODUCT_ID Short statement CLUSTER_NAME Short statement OCP_VERSION Short statement Optional environment variables \uf0c1 FYRE_CLUSTER_SIZE Short statement W3_USERNAME This is required if you want to install the pre-release MAS operator catalogs ARTIFACTORY_APIKEY This is required if you want to install the pre-release MAS operator catalogs Provision \uf0c1 As part of provisioning on QuickBurn: The IBM operator catalog and IBM common services catalog will be installed MAS development catalogs will be installed if W3_USERNAME and ARTIFACTORY_APIKEY environment variables are both defined Certificate manager and service binding operators will be installed at cluster scope Monitoring for user-defined projects will be enabled in the cluster OpenShift Container Storage will be configured in the cluster export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 export CLUSTER_NAME=xxx export OCP_VERSION=4.6.16 ansible-playbook playbooks/ocp/provision-quickburn.yml Deprovision \uf0c1 export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export CLUSTER_NAME=xxx ansible-playbook playbooks/ocp/deprovision-quickburn.yml","title":"OCP Playbooks"},{"location":"playbooks/ocp/#ocp-playbooks","text":"","title":"OCP Playbooks"},{"location":"playbooks/ocp/#roks","text":"Provide intro ...","title":"ROKS"},{"location":"playbooks/ocp/#required-environment-variables","text":"IBMCLOUD_APIKEY Short statement CLUSTER_NAME Short statement OCP_VERSION Short statement","title":"Required environment variables"},{"location":"playbooks/ocp/#optional-environment-variables","text":"ROKS_ZONE Short statement ROKS_FLAVOR Short statement ROKS_WORKERS Short statement ROKS_FLAGS Short statement W3_USERNAME This is required if you want to install the pre-release MAS operator catalogs ARTIFACTORY_APIKEY This is required if you want to install the pre-release MAS operator catalogs","title":"Optional environment variables"},{"location":"playbooks/ocp/#provision","text":"As part of provisioning on IBM Cloud: The IBM operator catalog will be installed MAS development catalogs will be installed if W3_USERNAME and ARTIFACTORY_APIKEY environment variables are both defined Certificate manager and service binding operators will be installed at cluster scope Monitoring for user-defined projects will be enabled in the cluster export VAR_NAME=xxx export VAR_NAME=xxx ansible-playbook playbooks/ocp/provision-roks.yml","title":"Provision"},{"location":"playbooks/ocp/#deprovision","text":"export VAR_NAME=xxx export VAR_NAME=xxx ansible-playbook playbooks/ocp/deprovision-roks.yml","title":"Deprovision"},{"location":"playbooks/ocp/#quickburn","text":"Provide intro ...","title":"QuickBurn"},{"location":"playbooks/ocp/#required-environment-variables_1","text":"FYRE_USERNAME Short statement FYRE_APIKEY Short statement FYRE_PRODUCT_ID Short statement CLUSTER_NAME Short statement OCP_VERSION Short statement","title":"Required environment variables"},{"location":"playbooks/ocp/#optional-environment-variables_1","text":"FYRE_CLUSTER_SIZE Short statement W3_USERNAME This is required if you want to install the pre-release MAS operator catalogs ARTIFACTORY_APIKEY This is required if you want to install the pre-release MAS operator catalogs","title":"Optional environment variables"},{"location":"playbooks/ocp/#provision_1","text":"As part of provisioning on QuickBurn: The IBM operator catalog and IBM common services catalog will be installed MAS development catalogs will be installed if W3_USERNAME and ARTIFACTORY_APIKEY environment variables are both defined Certificate manager and service binding operators will be installed at cluster scope Monitoring for user-defined projects will be enabled in the cluster OpenShift Container Storage will be configured in the cluster export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export FYRE_PRODUCT_ID=225 export CLUSTER_NAME=xxx export OCP_VERSION=4.6.16 ansible-playbook playbooks/ocp/provision-quickburn.yml","title":"Provision"},{"location":"playbooks/ocp/#deprovision_1","text":"export FYRE_USERNAME=xxx export FYRE_APIKEY=xxx export CLUSTER_NAME=xxx ansible-playbook playbooks/ocp/deprovision-quickburn.yml","title":"Deprovision"},{"location":"playbooks/sls/","text":"SLS Playbooks \uf0c1 Install sls \uf0c1 Before you use this playbook you will likely want to edit the mas_config_dir variable to supply your own configurtation, instead of the sample data provided. Required environment variables \uf0c1 SLS_ENTITLEMENT_KEY Provide your IBM entitlement key Optional environment variables \uf0c1 SLS_CATALOG_SOURCE Set to ibm-sls-operators if you want to deploy pre-release development builds SLS_CHANNEL Override the default release channel (3.x) SLS_ICR_CP Override the registry source for all container images deployed by the SLS operator SLS_ICR_CPOPEN Override the registry source for all container images deployed by the SLS operator SLS_ENTITLEMENT_USERNAME Override the default entitlement username (cp) SLS_NAMESPACE Override the default entitlement username (ibm-sls) SLS_STORAGE_CLASS Defines Storage Class to be used by SLS Persistent Volumes SLS_LICENSE_ID Must be set to the license id specified in the license file when one is provided SLS_REGISTRATION_KEY optional var when you want to install sls using a registration key you have. Example usage: release build \uf0c1 export SLS_INSTANCE_ID=xxx export SLS_ENTITLEMENT_KEY=xxx export SLS_STORAGE_CLASS=xxx ansible-playbook playbooks/sls/install-sls.yml Note Lookup your entitlement key from the IBM Container Library Example usage: pre-release build \uf0c1 export SLS_CATALOG_SOURCE=ibm-sls-operators export SLS_CHANNEL=3.1.0-pre.stable export SLS_INSTANCE_ID=xxx export SLS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export SLS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export SLS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export SLS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export SLS_STORAGE_CLASS=xxx ansible-playbook playbooks/sls/install-sls.yml Important You must have already installed the development (pre-release) catalogs, pre-release builds are not available directly from the IBM Operator Catalog.","title":"SLS Playbook"},{"location":"playbooks/sls/#sls-playbooks","text":"","title":"SLS Playbooks"},{"location":"playbooks/sls/#install-sls","text":"Before you use this playbook you will likely want to edit the mas_config_dir variable to supply your own configurtation, instead of the sample data provided.","title":"Install sls"},{"location":"playbooks/sls/#required-environment-variables","text":"SLS_ENTITLEMENT_KEY Provide your IBM entitlement key","title":"Required environment variables"},{"location":"playbooks/sls/#optional-environment-variables","text":"SLS_CATALOG_SOURCE Set to ibm-sls-operators if you want to deploy pre-release development builds SLS_CHANNEL Override the default release channel (3.x) SLS_ICR_CP Override the registry source for all container images deployed by the SLS operator SLS_ICR_CPOPEN Override the registry source for all container images deployed by the SLS operator SLS_ENTITLEMENT_USERNAME Override the default entitlement username (cp) SLS_NAMESPACE Override the default entitlement username (ibm-sls) SLS_STORAGE_CLASS Defines Storage Class to be used by SLS Persistent Volumes SLS_LICENSE_ID Must be set to the license id specified in the license file when one is provided SLS_REGISTRATION_KEY optional var when you want to install sls using a registration key you have.","title":"Optional environment variables"},{"location":"playbooks/sls/#example-usage-release-build","text":"export SLS_INSTANCE_ID=xxx export SLS_ENTITLEMENT_KEY=xxx export SLS_STORAGE_CLASS=xxx ansible-playbook playbooks/sls/install-sls.yml Note Lookup your entitlement key from the IBM Container Library","title":"Example usage: release build"},{"location":"playbooks/sls/#example-usage-pre-release-build","text":"export SLS_CATALOG_SOURCE=ibm-sls-operators export SLS_CHANNEL=3.1.0-pre.stable export SLS_INSTANCE_ID=xxx export SLS_ICR_CP=wiotp-docker-local.artifactory.swg-devops.com export SLS_ICR_CPOPEN=wiotp-docker-local.artifactory.swg-devops.com export SLS_ENTITLEMENT_USERNAME=$W3_USERNAME_LOWERCASE export SLS_ENTITLEMENT_KEY=$ARTIFACTORY_APIKEY export SLS_STORAGE_CLASS=xxx ansible-playbook playbooks/sls/install-sls.yml Important You must have already installed the development (pre-release) catalogs, pre-release builds are not available directly from the IBM Operator Catalog.","title":"Example usage: pre-release build"},{"location":"roles/airgap_install_case/","text":"airgap_install_case \uf0c1 This role uses a CASE bundle and the cloudctl tool to run the airgap installation of the CASE operator. Prereqs \uf0c1 cloudctl tool must be installed Role Variables \uf0c1 cluster_name Gives a name for the provisioned cluster cluster_type quickburn username username for fyre api password password for fyre api case_name the name of the CASE bundle to be installed case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_inventory_name :` the name of the Setup inventory within the CASE bundle target_namespace the namespace targetted for airgap installation catalog_type development | production Optional facts \uf0c1 debugs : comma separated string of debug output to print Example Playbook \uf0c1 - hosts: localhost vars: # General configuration cluster_name: \"{{ lookup('env', 'CLUSTER_NAME') }}\" cluster_type: quickburn username: \"{{ lookup('env', 'FYRE_USERNAME') }}\" password: \"{{ lookup('env', 'FYRE_APIKEY') }}\" # Case config case_name: \"{{ lookup('env', 'CASE_NAME') }}\" case_bundle_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}\" case_archive_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}/archive\" case_inventory_name: \"{{ lookup('env', 'CASE_INV_NAME') }}\" # Airgap control parameters: target_namespace: \"mas-{{ lookup('env', 'MAS_INSTANCE_ID') }}-core\" catalog_type: development debugs: \"_oc_status,installOperatorResult\" roles: - ibm.mas_devops.airgap_install_case License \uf0c1 EPL-2.0","title":"airgap_install_case"},{"location":"roles/airgap_install_case/#airgap_install_case","text":"This role uses a CASE bundle and the cloudctl tool to run the airgap installation of the CASE operator.","title":"airgap_install_case"},{"location":"roles/airgap_install_case/#prereqs","text":"cloudctl tool must be installed","title":"Prereqs"},{"location":"roles/airgap_install_case/#role-variables","text":"cluster_name Gives a name for the provisioned cluster cluster_type quickburn username username for fyre api password password for fyre api case_name the name of the CASE bundle to be installed case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_inventory_name :` the name of the Setup inventory within the CASE bundle target_namespace the namespace targetted for airgap installation catalog_type development | production","title":"Role Variables"},{"location":"roles/airgap_install_case/#optional-facts","text":"debugs : comma separated string of debug output to print","title":"Optional facts"},{"location":"roles/airgap_install_case/#example-playbook","text":"- hosts: localhost vars: # General configuration cluster_name: \"{{ lookup('env', 'CLUSTER_NAME') }}\" cluster_type: quickburn username: \"{{ lookup('env', 'FYRE_USERNAME') }}\" password: \"{{ lookup('env', 'FYRE_APIKEY') }}\" # Case config case_name: \"{{ lookup('env', 'CASE_NAME') }}\" case_bundle_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}\" case_archive_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}/archive\" case_inventory_name: \"{{ lookup('env', 'CASE_INV_NAME') }}\" # Airgap control parameters: target_namespace: \"mas-{{ lookup('env', 'MAS_INSTANCE_ID') }}-core\" catalog_type: development debugs: \"_oc_status,installOperatorResult\" roles: - ibm.mas_devops.airgap_install_case","title":"Example Playbook"},{"location":"roles/airgap_install_case/#license","text":"EPL-2.0","title":"License"},{"location":"roles/airgap_mirror_case/","text":"airgap_mirror_case \uf0c1 This role uses the specifed CASE bundle to mirror container images to a mirror registry and configure the cluster to pull images from this mirror. !!! IMPORTANT The contents of the directory specified by $DEV_AIRGAP_CHANGES are copied over the $CASE_BUNDLE_DIR, so the sub-directory structure of the two should match. e.g. $ tree $DEV_AIRGAP_CHANGES /Users/paulstone/GitHub/ibm-mas-case/dev-airgap-changes \u251c\u2500\u2500 archive \u2502 \u251c\u2500\u2500 ibm-mas-8.5.0-pre.issue-7078a-test-images.csv \u2502 \u2514\u2500\u2500 ibm-truststore-mgr-1.0.0-images.csv \u2514\u2500\u2500 case \u2514\u2500\u2500 ibm-mas \u2514\u2500\u2500 inventory \u2514\u2500\u2500 ibmMasSetup \u2514\u2500\u2500 files \u2514\u2500\u2500 image-map.yaml Role Variables \uf0c1 cluster_name -Gives a name for the provisioned cluster cluster_type quickburn username username for fyre api password password for fyre api case_name the name of the CASE bundle to be installed case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_inventory_name :` the name of the Setup inventory within the CASE bundle target_namespace the namespace targetted for airgap installation catalog_type development | production cp_icr_entitlement the entitlement key for mirroring container images from cp.icr.io registries list of entries, each with host , user and password , credentials for each registry listed in the CASE bundle to allow image mirroring Optional facts \uf0c1 debugs : comma separated string of debug output to print dev_overrides a directory containing development specific files to override the production CASE bundle Example Playbook \uf0c1 - hosts: localhost vars: # General configuration cluster_name: \"{{ lookup('env', 'CLUSTER_NAME') }}\" cluster_type: quickburn username: \"{{ lookup('env', 'FYRE_USERNAME') }}\" password: \"{{ lookup('env', 'FYRE_APIKEY') }}\" # Case config case_name: \"{{ lookup('env', 'CASE_NAME') }}\" case_bundle_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}\" case_archive_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}/archive\" case_inventory_name: \"{{ lookup('env', 'CASE_INV_NAME') }}\" # Airgap control parameters: check_network: \"{{ lookup('env', 'CHECK_NETWORK') | default('true', true)}}\" target_namespace: test-airgap # used as a DNS-1123 label so it must consist of lower case alphanumeric characters or hyphens catalog_type: development debugs: \"registryHosts,mirrorImageResult,configureClusterResult\" ignoreMirrorError: false cp_icr_entitlement: \"{{ lookup('env', 'CP_ICR_ENTITLEMENT_KEY') }}\" dev_overrides: \"{{ lookup('env', 'DEV_AIRGAP_CHANGES') }}\" registries: - host: cp.icr.io user: cp password: \"{{ lookup('env', 'CP_ICR_ENTITLEMENT_KEY') }}\" roles: - ibm.mas_devops.airgap_mirror_case License \uf0c1 EPL-2.0","title":"airgap_mirror_case"},{"location":"roles/airgap_mirror_case/#airgap_mirror_case","text":"This role uses the specifed CASE bundle to mirror container images to a mirror registry and configure the cluster to pull images from this mirror. !!! IMPORTANT The contents of the directory specified by $DEV_AIRGAP_CHANGES are copied over the $CASE_BUNDLE_DIR, so the sub-directory structure of the two should match. e.g. $ tree $DEV_AIRGAP_CHANGES /Users/paulstone/GitHub/ibm-mas-case/dev-airgap-changes \u251c\u2500\u2500 archive \u2502 \u251c\u2500\u2500 ibm-mas-8.5.0-pre.issue-7078a-test-images.csv \u2502 \u2514\u2500\u2500 ibm-truststore-mgr-1.0.0-images.csv \u2514\u2500\u2500 case \u2514\u2500\u2500 ibm-mas \u2514\u2500\u2500 inventory \u2514\u2500\u2500 ibmMasSetup \u2514\u2500\u2500 files \u2514\u2500\u2500 image-map.yaml","title":"airgap_mirror_case"},{"location":"roles/airgap_mirror_case/#role-variables","text":"cluster_name -Gives a name for the provisioned cluster cluster_type quickburn username username for fyre api password password for fyre api case_name the name of the CASE bundle to be installed case_bundle_dir the location of the CASE bundle case_archive_dir the location to store cloudctl working files, typically ./archive under the case_bundle_dir case_inventory_name :` the name of the Setup inventory within the CASE bundle target_namespace the namespace targetted for airgap installation catalog_type development | production cp_icr_entitlement the entitlement key for mirroring container images from cp.icr.io registries list of entries, each with host , user and password , credentials for each registry listed in the CASE bundle to allow image mirroring","title":"Role Variables"},{"location":"roles/airgap_mirror_case/#optional-facts","text":"debugs : comma separated string of debug output to print dev_overrides a directory containing development specific files to override the production CASE bundle","title":"Optional facts"},{"location":"roles/airgap_mirror_case/#example-playbook","text":"- hosts: localhost vars: # General configuration cluster_name: \"{{ lookup('env', 'CLUSTER_NAME') }}\" cluster_type: quickburn username: \"{{ lookup('env', 'FYRE_USERNAME') }}\" password: \"{{ lookup('env', 'FYRE_APIKEY') }}\" # Case config case_name: \"{{ lookup('env', 'CASE_NAME') }}\" case_bundle_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}\" case_archive_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}/archive\" case_inventory_name: \"{{ lookup('env', 'CASE_INV_NAME') }}\" # Airgap control parameters: check_network: \"{{ lookup('env', 'CHECK_NETWORK') | default('true', true)}}\" target_namespace: test-airgap # used as a DNS-1123 label so it must consist of lower case alphanumeric characters or hyphens catalog_type: development debugs: \"registryHosts,mirrorImageResult,configureClusterResult\" ignoreMirrorError: false cp_icr_entitlement: \"{{ lookup('env', 'CP_ICR_ENTITLEMENT_KEY') }}\" dev_overrides: \"{{ lookup('env', 'DEV_AIRGAP_CHANGES') }}\" registries: - host: cp.icr.io user: cp password: \"{{ lookup('env', 'CP_ICR_ENTITLEMENT_KEY') }}\" roles: - ibm.mas_devops.airgap_mirror_case","title":"Example Playbook"},{"location":"roles/airgap_mirror_case/#license","text":"EPL-2.0","title":"License"},{"location":"roles/airgap_prepare_case/","text":"airgap_prepare_case \uf0c1 Prepare the specified CASE bundle for airgap installation. It can download the CASE bundle from an internet archive or take a case bundle in a local directory. Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 - hosts: localhost vars: # Case config case_name: \"{{ lookup('env', 'CASE_NAME') }}\" case_source: \"{{ lookup('env', 'CASE_SOURCE') }}\" case_bundle_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}\" case_archive_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}/archive\" case_inventory_name: \"{{ lookup('env', 'CASE_INV_NAME') }}\" debugs: \"registryHosts,mirrorImageResult,configureClusterResult\" roles: - ibm.mas_devops.airgap_prepare_case License \uf0c1 EPL-2.0","title":"airgap_prepare_case"},{"location":"roles/airgap_prepare_case/#airgap_prepare_case","text":"Prepare the specified CASE bundle for airgap installation. It can download the CASE bundle from an internet archive or take a case bundle in a local directory.","title":"airgap_prepare_case"},{"location":"roles/airgap_prepare_case/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/airgap_prepare_case/#example-playbook","text":"- hosts: localhost vars: # Case config case_name: \"{{ lookup('env', 'CASE_NAME') }}\" case_source: \"{{ lookup('env', 'CASE_SOURCE') }}\" case_bundle_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}\" case_archive_dir: \"{{ lookup('env', 'CASE_BUNDLE_DIR') }}/archive\" case_inventory_name: \"{{ lookup('env', 'CASE_INV_NAME') }}\" debugs: \"registryHosts,mirrorImageResult,configureClusterResult\" roles: - ibm.mas_devops.airgap_prepare_case","title":"Example Playbook"},{"location":"roles/airgap_prepare_case/#license","text":"EPL-2.0","title":"License"},{"location":"roles/amqstreams/","text":"amqstreams \uf0c1 This role provides support to install a Kafka Cluster using Red Hat AMQ Streams and generate configuration that can be directly applied to Maximo Application Suite. The Red Hat AMQ streams component is a massively scalable, distributed, and high-performance data streaming platform based on the Apache Kafka project. It offers a distributed backbone that allows microservices and other applications to share data with high throughput and low latency. As more applications move to Kubernetes and Red Hat OpenShift, it is increasingly important to be able to run the communication infrastructure on the same platform. Red Hat OpenShift, as a highly scalable platform, is a natural fit for messaging technologies such as Kafka. The AMQ streams component makes running and managing Apache Kafka OpenShift native through the use of powerful operators that simplify the deployment, configuration, management, and use of Apache Kafka on Red Hat OpenShift. The AMQ streams component is part of the Red Hat AMQ family, which also includes the AMQ broker, a longtime innovation leader in Java\u2122 Message Service (JMS) and polyglot messaging, as well as the AMQ interconnect router, a wide-area, peer-to-peer messaging solution. Role Variables \uf0c1 mas_instance_id The instance ID of Maximo Application Suite that the KafkaCfg configuration will target, there is no default value for this, it must be passed into the role when invoked. kafka_namespace The namespace where the operator and Kafka cluster will be deployed, defaults to amq-streams kafka_cluster_name The name of the Kafka cluster that will be created, defaults to maskafka kafka_cluster_size The configuration to apply, there are two configurations available: small and large. Defaults to small kafka_user_name The name of the user to setup in the cluster for MAS, defaults to masuser kafka_cfg_file The location on the local filesystem where the template for the KafkaCfg and associated Secret will be saved. Defaults to /tmp/kafkacfg-amqstreams-system.yaml Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: kafka_namespace: \"{{ lookup('env', 'KAFKA_NAMESPACE') }}\" kafka_cluster_name: \"{{ lookup('env', 'KAFKA_CLUSER_NAME') }}\" kafka_cluster_size: \"{{ lookup('env', 'KAFKA_CLUSTER_SIZE') }}\" kafka_storage_class: \"{{ lookup('env', 'KAFKA_STORAGE_CLASS') }}\" kafka_user_name: \"{{ lookup('env', 'KAFKA_USER_NAME') }}\" mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.amqstreams License \uf0c1 EPL-2.0","title":"amqstreams"},{"location":"roles/amqstreams/#amqstreams","text":"This role provides support to install a Kafka Cluster using Red Hat AMQ Streams and generate configuration that can be directly applied to Maximo Application Suite. The Red Hat AMQ streams component is a massively scalable, distributed, and high-performance data streaming platform based on the Apache Kafka project. It offers a distributed backbone that allows microservices and other applications to share data with high throughput and low latency. As more applications move to Kubernetes and Red Hat OpenShift, it is increasingly important to be able to run the communication infrastructure on the same platform. Red Hat OpenShift, as a highly scalable platform, is a natural fit for messaging technologies such as Kafka. The AMQ streams component makes running and managing Apache Kafka OpenShift native through the use of powerful operators that simplify the deployment, configuration, management, and use of Apache Kafka on Red Hat OpenShift. The AMQ streams component is part of the Red Hat AMQ family, which also includes the AMQ broker, a longtime innovation leader in Java\u2122 Message Service (JMS) and polyglot messaging, as well as the AMQ interconnect router, a wide-area, peer-to-peer messaging solution.","title":"amqstreams"},{"location":"roles/amqstreams/#role-variables","text":"mas_instance_id The instance ID of Maximo Application Suite that the KafkaCfg configuration will target, there is no default value for this, it must be passed into the role when invoked. kafka_namespace The namespace where the operator and Kafka cluster will be deployed, defaults to amq-streams kafka_cluster_name The name of the Kafka cluster that will be created, defaults to maskafka kafka_cluster_size The configuration to apply, there are two configurations available: small and large. Defaults to small kafka_user_name The name of the user to setup in the cluster for MAS, defaults to masuser kafka_cfg_file The location on the local filesystem where the template for the KafkaCfg and associated Secret will be saved. Defaults to /tmp/kafkacfg-amqstreams-system.yaml","title":"Role Variables"},{"location":"roles/amqstreams/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: kafka_namespace: \"{{ lookup('env', 'KAFKA_NAMESPACE') }}\" kafka_cluster_name: \"{{ lookup('env', 'KAFKA_CLUSER_NAME') }}\" kafka_cluster_size: \"{{ lookup('env', 'KAFKA_CLUSTER_SIZE') }}\" kafka_storage_class: \"{{ lookup('env', 'KAFKA_STORAGE_CLASS') }}\" kafka_user_name: \"{{ lookup('env', 'KAFKA_USER_NAME') }}\" mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.amqstreams","title":"Example Playbook"},{"location":"roles/amqstreams/#license","text":"EPL-2.0","title":"License"},{"location":"roles/bas_install/","text":"bas_install \uf0c1 TODO: Add intro Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO License \uf0c1 EPL-2.0","title":"bas_install"},{"location":"roles/bas_install/#bas_install","text":"TODO: Add intro","title":"bas_install"},{"location":"roles/bas_install/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/bas_install/#example-playbook","text":"TODO","title":"Example Playbook"},{"location":"roles/bas_install/#license","text":"EPL-2.0","title":"License"},{"location":"roles/cp4d_db2wh/","text":"cp4d_db2wh \uf0c1 TODO: Add intro Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: # Configuration for the Db2 cluster db2wh_version: 11.5.5.0-cn3 db2wh_username: db2inst1 db2wh_instance_id: db2wh-db01 db2wh_dbname: BLUDB # Create the MAS JdbcCfg & Secret resource definitions mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.cp4d_db2wh License \uf0c1 EPL-2.0","title":"cp4d_db2wh"},{"location":"roles/cp4d_db2wh/#cp4d_db2wh","text":"TODO: Add intro","title":"cp4d_db2wh"},{"location":"roles/cp4d_db2wh/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/cp4d_db2wh/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: # Configuration for the Db2 cluster db2wh_version: 11.5.5.0-cn3 db2wh_username: db2inst1 db2wh_instance_id: db2wh-db01 db2wh_dbname: BLUDB # Create the MAS JdbcCfg & Secret resource definitions mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.cp4d_db2wh","title":"Example Playbook"},{"location":"roles/cp4d_db2wh/#license","text":"EPL-2.0","title":"License"},{"location":"roles/cp4d_db2wh_manage_hack/","text":"cp4d_db2wh_manage_hack \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"cp4d_db2wh_manage_hack"},{"location":"roles/cp4d_db2wh_manage_hack/#cp4d_db2wh_manage_hack","text":"TODO: Summarize role","title":"cp4d_db2wh_manage_hack"},{"location":"roles/cp4d_db2wh_manage_hack/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/cp4d_db2wh_manage_hack/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/cp4d_db2wh_manage_hack/#license","text":"EPL-2.0","title":"License"},{"location":"roles/cp4d_install/","text":"cp4d_install \uf0c1 This role installs IBM Cloud Pak for Data Operator in the target cluster. Role Variables \uf0c1 cpd_registry_password Holds the IBM Entitlement key cpd_registry cp.icr.io cpd_registry_user cp cpd_meta_namespace Namespace to be created and used for CP4D deployment Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: cpd_registry: cp.icr.io cpd_registry_user: cp cpd_registry_password: \"{{ lookup('env', 'CPD_ENTITLEMENT_KEY') }}\" cpd_meta_namespace: cpd-meta-ops # CP4D service configuration cpd_storage_class: \"{{ lookup('env', 'CPD_STORAGE_CLASS') }}\" cpd_services: - lite roles: - ibm.mas_devops.cp4d_install - ibm.mas_devops.cp4d_install_services License \uf0c1 EPL-2.0","title":"cp4d_install"},{"location":"roles/cp4d_install/#cp4d_install","text":"This role installs IBM Cloud Pak for Data Operator in the target cluster.","title":"cp4d_install"},{"location":"roles/cp4d_install/#role-variables","text":"cpd_registry_password Holds the IBM Entitlement key cpd_registry cp.icr.io cpd_registry_user cp cpd_meta_namespace Namespace to be created and used for CP4D deployment","title":"Role Variables"},{"location":"roles/cp4d_install/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: cpd_registry: cp.icr.io cpd_registry_user: cp cpd_registry_password: \"{{ lookup('env', 'CPD_ENTITLEMENT_KEY') }}\" cpd_meta_namespace: cpd-meta-ops # CP4D service configuration cpd_storage_class: \"{{ lookup('env', 'CPD_STORAGE_CLASS') }}\" cpd_services: - lite roles: - ibm.mas_devops.cp4d_install - ibm.mas_devops.cp4d_install_services","title":"Example Playbook"},{"location":"roles/cp4d_install/#license","text":"EPL-2.0","title":"License"},{"location":"roles/cp4d_install_services/","text":"cp4d_install_services \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"cp4d_install_services"},{"location":"roles/cp4d_install_services/#cp4d_install_services","text":"TODO: Summarize role","title":"cp4d_install_services"},{"location":"roles/cp4d_install_services/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/cp4d_install_services/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/cp4d_install_services/#license","text":"EPL-2.0","title":"License"},{"location":"roles/fvt_simulate_airgap/","text":"fvt_simulate_airgap \uf0c1 This role provides to support to configure a cluster for simulated airgap installation testing. This includes disabling newtwork access to public image repositories and sets up the OCP Internal Registry in preparation for image mirroring. Role Variables \uf0c1 cluster_name -Gives a name for the provisioned cluster cluster_type quickburn username username for fyre api password password for fyre api Optional facts \uf0c1 debugs : comma separated string of debug output to print Example Playbook \uf0c1 - hosts: localhost vars: # General configuration cluster_name: \"{{ lookup('env', 'CLUSTER_NAME') }}\" cluster_type: quickburn username: \"{{ lookup('env', 'FYRE_USERNAME') }}\" password: \"{{ lookup('env', 'FYRE_APIKEY') }}\" # Airgap control parameters: debugs: \"registryHosts,mirrorImageResult,configureClusterResult\" roles: - role: ibm.mas_devops.fvt_simulate_airgap License \uf0c1 EPL-2.0","title":"fvt_simulate_airgap"},{"location":"roles/fvt_simulate_airgap/#fvt_simulate_airgap","text":"This role provides to support to configure a cluster for simulated airgap installation testing. This includes disabling newtwork access to public image repositories and sets up the OCP Internal Registry in preparation for image mirroring.","title":"fvt_simulate_airgap"},{"location":"roles/fvt_simulate_airgap/#role-variables","text":"cluster_name -Gives a name for the provisioned cluster cluster_type quickburn username username for fyre api password password for fyre api","title":"Role Variables"},{"location":"roles/fvt_simulate_airgap/#optional-facts","text":"debugs : comma separated string of debug output to print","title":"Optional facts"},{"location":"roles/fvt_simulate_airgap/#example-playbook","text":"- hosts: localhost vars: # General configuration cluster_name: \"{{ lookup('env', 'CLUSTER_NAME') }}\" cluster_type: quickburn username: \"{{ lookup('env', 'FYRE_USERNAME') }}\" password: \"{{ lookup('env', 'FYRE_APIKEY') }}\" # Airgap control parameters: debugs: \"registryHosts,mirrorImageResult,configureClusterResult\" roles: - role: ibm.mas_devops.fvt_simulate_airgap","title":"Example Playbook"},{"location":"roles/fvt_simulate_airgap/#license","text":"EPL-2.0","title":"License"},{"location":"roles/install_operator/","text":"install_operator \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"install_operator"},{"location":"roles/install_operator/#install_operator","text":"TODO: Summarize role","title":"install_operator"},{"location":"roles/install_operator/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/install_operator/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/install_operator/#license","text":"EPL-2.0","title":"License"},{"location":"roles/mongodb/","text":"mongodb \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"mongodb"},{"location":"roles/mongodb/#mongodb","text":"TODO: Summarize role","title":"mongodb"},{"location":"roles/mongodb/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/mongodb/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/mongodb/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_deprovision/","text":"ocp_deprovision \uf0c1 Deprovision OCP cluster in Fyre and IBM Cloud Role Variables \uf0c1 cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks ROKS specific facts \uf0c1 ibmcloud_apikey APIKey to be used by ibmcloud login comand Fyre specific facts \uf0c1 username Required when cluster type is quickburn password Required when cluster type is quickburn Example Playbook \uf0c1 - hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_deprovision License \uf0c1 EPL-2.0","title":"ocp_deprovision"},{"location":"roles/ocp_deprovision/#ocp_deprovision","text":"Deprovision OCP cluster in Fyre and IBM Cloud","title":"ocp_deprovision"},{"location":"roles/ocp_deprovision/#role-variables","text":"cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks","title":"Role Variables"},{"location":"roles/ocp_deprovision/#roks-specific-facts","text":"ibmcloud_apikey APIKey to be used by ibmcloud login comand","title":"ROKS specific facts"},{"location":"roles/ocp_deprovision/#fyre-specific-facts","text":"username Required when cluster type is quickburn password Required when cluster type is quickburn","title":"Fyre specific facts"},{"location":"roles/ocp_deprovision/#example-playbook","text":"- hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_deprovision","title":"Example Playbook"},{"location":"roles/ocp_deprovision/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_login/","text":"ocp_login \uf0c1 This role provides support to login to a cluster using the oc cli Role Variables \uf0c1 cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks ROKS specific facts \uf0c1 ibmcloud_apikey APIKey to be used by ibmcloud login comand Fyre specific facts \uf0c1 username Required when cluster type is quickburn password Required when cluster type is quickburn Example Playbook \uf0c1 - hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_login License \uf0c1 EPL-2.0","title":"ocp_login"},{"location":"roles/ocp_login/#ocp_login","text":"This role provides support to login to a cluster using the oc cli","title":"ocp_login"},{"location":"roles/ocp_login/#role-variables","text":"cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks","title":"Role Variables"},{"location":"roles/ocp_login/#roks-specific-facts","text":"ibmcloud_apikey APIKey to be used by ibmcloud login comand","title":"ROKS specific facts"},{"location":"roles/ocp_login/#fyre-specific-facts","text":"username Required when cluster type is quickburn password Required when cluster type is quickburn","title":"Fyre specific facts"},{"location":"roles/ocp_login/#example-playbook","text":"- hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_login","title":"Example Playbook"},{"location":"roles/ocp_login/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_provision/","text":"ocp_provision \uf0c1 Provision OCP cluster on DevIT Fyre or IBM Cloud ROKS. Role Variables \uf0c1 cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks ocp_version Openshift version for the provisioning cluster Warning Different providers expect OCP version strings is slightly different formats. For example in Fyre you would use something like 4.6.16 , whereas in IBM Cloud it would be 4.6_openshift ROKS specific facts \uf0c1 ibmcloud_apikey APIKey to be used by ibmcloud login comand roks_zone IBM Cloud zone where the cluster should be provisioned roks_flavor Worker node flavor roks_workers Number of worker nodes for the roks cluster roks_flags Can be used to specify additional parameters for the cluster creation Fyre specific facts \uf0c1 username Required when cluster type is quickburn password Required when cluster type is quickburn fyre_product_id Required when cluster_type is quickburn Product Group Id to use for cluster provisioning fyre_cluster_size Required when cluster_type is quickburn, currently supports medium or large Example Playbook \uf0c1 - hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ocp_version: \"{{ lookup('env', 'OCP_VERSION') }}\" roks_zone: \"{{ lookup('env', 'ROKS_ZONE') | default('lon02', true) }}\" roks_flavor: \"{{ lookup('env', 'ROKS_FLAVOR') | default('b3c.16x64', true) }}\" roks_workers: \"{{ lookup('env', 'ROKS_WORKERS') | default('3', true) }}\" roks_flags: \"{{ lookup('env', 'ROKS_FLAGS') | default('', true) }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_provision - ibm.mas_devops.ocp_setup_mas_deps License \uf0c1 EPL-2.0","title":"ocp_provision"},{"location":"roles/ocp_provision/#ocp_provision","text":"Provision OCP cluster on DevIT Fyre or IBM Cloud ROKS.","title":"ocp_provision"},{"location":"roles/ocp_provision/#role-variables","text":"cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks ocp_version Openshift version for the provisioning cluster Warning Different providers expect OCP version strings is slightly different formats. For example in Fyre you would use something like 4.6.16 , whereas in IBM Cloud it would be 4.6_openshift","title":"Role Variables"},{"location":"roles/ocp_provision/#roks-specific-facts","text":"ibmcloud_apikey APIKey to be used by ibmcloud login comand roks_zone IBM Cloud zone where the cluster should be provisioned roks_flavor Worker node flavor roks_workers Number of worker nodes for the roks cluster roks_flags Can be used to specify additional parameters for the cluster creation","title":"ROKS specific facts"},{"location":"roles/ocp_provision/#fyre-specific-facts","text":"username Required when cluster type is quickburn password Required when cluster type is quickburn fyre_product_id Required when cluster_type is quickburn Product Group Id to use for cluster provisioning fyre_cluster_size Required when cluster_type is quickburn, currently supports medium or large","title":"Fyre specific facts"},{"location":"roles/ocp_provision/#example-playbook","text":"- hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ocp_version: \"{{ lookup('env', 'OCP_VERSION') }}\" roks_zone: \"{{ lookup('env', 'ROKS_ZONE') | default('lon02', true) }}\" roks_flavor: \"{{ lookup('env', 'ROKS_FLAVOR') | default('b3c.16x64', true) }}\" roks_workers: \"{{ lookup('env', 'ROKS_WORKERS') | default('3', true) }}\" roks_flags: \"{{ lookup('env', 'ROKS_FLAGS') | default('', true) }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_provision - ibm.mas_devops.ocp_setup_mas_deps","title":"Example Playbook"},{"location":"roles/ocp_provision/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_setup_github_oauth/","text":"ocp_setup_github_oauth \uf0c1 This role provides to support to configure cluster oauth using GitHub. Warning Make sure you have configured the oauth app in GitHub organization before use this role. When configuring make sure to use ibmgithub as the oauth id. Requires organization admin permission to perform this action. Role Variables \uf0c1 oauth.github_client_secret_value Secret value provided by the GitHub oauth app configuration. ouath.github_client_id_value Client ID value provided by the GitHub oauth app configuration. oauth.github_hostname can be used to target public GitHub or an enterprise account (e.g. github.ibm.com) oauth.groups List of groups to be created and its cluster role bindings oauth.groups.name Defines the name of the group oauth.groups.users List of users to be added to the group oauth.groups.groups_cluster_rolebindings List of cluster role bindings to be created for the group oauth.organizations List of GitHub organizations where the authentication will be performed Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"ocp_setup_github_oauth"},{"location":"roles/ocp_setup_github_oauth/#ocp_setup_github_oauth","text":"This role provides to support to configure cluster oauth using GitHub. Warning Make sure you have configured the oauth app in GitHub organization before use this role. When configuring make sure to use ibmgithub as the oauth id. Requires organization admin permission to perform this action.","title":"ocp_setup_github_oauth"},{"location":"roles/ocp_setup_github_oauth/#role-variables","text":"oauth.github_client_secret_value Secret value provided by the GitHub oauth app configuration. ouath.github_client_id_value Client ID value provided by the GitHub oauth app configuration. oauth.github_hostname can be used to target public GitHub or an enterprise account (e.g. github.ibm.com) oauth.groups List of groups to be created and its cluster role bindings oauth.groups.name Defines the name of the group oauth.groups.users List of users to be added to the group oauth.groups.groups_cluster_rolebindings List of cluster role bindings to be created for the group oauth.organizations List of GitHub organizations where the authentication will be performed","title":"Role Variables"},{"location":"roles/ocp_setup_github_oauth/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/ocp_setup_github_oauth/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_setup_mas_deps/","text":"ocp_setup_mas_deps \uf0c1 This role provides support to install operators that are required by MAS to work. The role will deploy Service Binding Operator in all namespaces and Cert Manager in the cert-manager namespace. The role declares a dependency on ocp_verify to ensure that the RedHat Operator Catalog is installed and ready before we try to install the Service Binding Operator from that catalog. Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"ocp_setup_mas_deps"},{"location":"roles/ocp_setup_mas_deps/#ocp_setup_mas_deps","text":"This role provides support to install operators that are required by MAS to work. The role will deploy Service Binding Operator in all namespaces and Cert Manager in the cert-manager namespace. The role declares a dependency on ocp_verify to ensure that the RedHat Operator Catalog is installed and ready before we try to install the Service Binding Operator from that catalog.","title":"ocp_setup_mas_deps"},{"location":"roles/ocp_setup_mas_deps/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/ocp_setup_mas_deps/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/ocp_setup_mas_deps/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_setup_ocs/","text":"ocp_setup_ocs \uf0c1 This role provides support to install Openshift Container Storage. This role is not used by default when setting up IBM Cloud ROKS clusters because they are automatically provisioned with their own storage plugin already. Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"ocp_setup_ocs"},{"location":"roles/ocp_setup_ocs/#ocp_setup_ocs","text":"This role provides support to install Openshift Container Storage. This role is not used by default when setting up IBM Cloud ROKS clusters because they are automatically provisioned with their own storage plugin already.","title":"ocp_setup_ocs"},{"location":"roles/ocp_setup_ocs/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/ocp_setup_ocs/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/ocp_setup_ocs/#license","text":"EPL-2.0","title":"License"},{"location":"roles/ocp_verify/","text":"ocp_verify \uf0c1 This role will verify that a provisioned OCP cluster is ready to be setup for MAS. In IBMCloud ROKS we have seen delays of over an hour before the Red Hat Operator catalog is ready to use. This will cause attempts to install anything from that CatalogSource to fail as the timeouts built into those roles are designed to catch problems with an install, rather than a half-provisioned cluster that is not properly ready to use. Role Variables \uf0c1 The role requires no variables itself, but depends on the ibm.mas_devops.ocp_login role, and as such inherits it's requirements. cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks ROKS specific facts \uf0c1 ibmcloud_apikey APIKey to be used by ibmcloud login comand Fyre specific facts \uf0c1 username Required when cluster type is quickburn password Required when cluster type is quickburn Example Playbook \uf0c1 - hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_verify License \uf0c1 EPL-2.0","title":"Ocp verify"},{"location":"roles/ocp_verify/#ocp_verify","text":"This role will verify that a provisioned OCP cluster is ready to be setup for MAS. In IBMCloud ROKS we have seen delays of over an hour before the Red Hat Operator catalog is ready to use. This will cause attempts to install anything from that CatalogSource to fail as the timeouts built into those roles are designed to catch problems with an install, rather than a half-provisioned cluster that is not properly ready to use.","title":"ocp_verify"},{"location":"roles/ocp_verify/#role-variables","text":"The role requires no variables itself, but depends on the ibm.mas_devops.ocp_login role, and as such inherits it's requirements. cluster_name Gives a name for the provisioning cluster cluster_type quickburn | roks","title":"Role Variables"},{"location":"roles/ocp_verify/#roks-specific-facts","text":"ibmcloud_apikey APIKey to be used by ibmcloud login comand","title":"ROKS specific facts"},{"location":"roles/ocp_verify/#fyre-specific-facts","text":"username Required when cluster type is quickburn password Required when cluster type is quickburn","title":"Fyre specific facts"},{"location":"roles/ocp_verify/#example-playbook","text":"- hosts: localhost vars: cluster_name: \"{{ lookup('env', 'CLUSTER_NAME')}}\" cluster_type: roks ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" ibmcloud_resourcegroup: \"{{ lookup('env', 'IBMCLOUD_RESOURCEGROUP') | default('Default', true) }}\" roles: - ibm.mas_devops.ocp_verify","title":"Example Playbook"},{"location":"roles/ocp_verify/#license","text":"EPL-2.0","title":"License"},{"location":"roles/sls_install/","text":"sls_install \uf0c1 Install IBM Suite License Service and generate configuration that can be directly applied to IBM Maximo Application Suite. Role Variables \uf0c1 Pre-release support \uf0c1 artifactory_username : Required when using this role for development versions of SLS artifactory_apikey Required when using this role for development versions of SLS Primary settings \uf0c1 sls_catalog_source Defines the catalog to be used to install SLS. You can set it to ibm-operator-catalog for release install or ibm-sls-operators for development sls_channel Defines which channel of MAS to subscribe to sls_namespace Defined the namespace where sls must be installed sls_icr_cp when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev sls_icr_cpopen when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev sls_instance_name Defines the instance id to be used for SLS installation sls_entitlement_username Username for entitled registry. This username will be used to create the image pull secret. Set to cp when installing release or use your w3Id for dev. sls_entitlement_key API Key for entitled registry. This password will be used to create the image pull secret. Set to with IBM entitlement key when installing release or use your sls_storage_class Defines the Storage Class that can be used by SLS to store data MongoDb settings \uf0c1 Use either mongodb_cfg_file or the mongodb object to configure the MongoDb for SLS to use mongodb_cfg_file Defines the path to the mongodb configuration used with MAS, when defined the SLS role will extract the configuration from there. mongodb Defines custom configuration for mongodb to be used with SLS, all the follwing facts are required when this fact is defined mongodb.hosts Defines list of host and port pair for MongoDb to be used with SLS mongodb.username Defines the MongoDB Username mongodb.password Defines the MongoDb Password bootstrap Bootstrap is used to initialize SLS, provide if you do have a lic file and licenseId you want to use bootstrap.license_id Defines the License Id to be used to bootstrap SLS bootstrap.registration_key Defines the Registration Key to be used to bootstrap SLS bootstrap.entitlement_file Defines the License File to be used to bootstrap SLS MAS integration \uf0c1 mas_instance_id The instance ID of Maximo Application Suite that the KafkaCfg configuration will target, there mas_config_dir Defines the directory from where some configs can be pulled from including the entitlement file and mongo configuration mas_instance_id Used to generate a output slscfg file for MAS sls_cfg_file Defines the destination dir for the generated SLS configuration for MAS Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: sls_catalog_source: \"{{ lookup('env', 'SLS_CATALOG_SOURCE') | default('ibm-operator-catalog', true) }}\" sls_channel: \"{{ lookup('env', 'SLS_CHANNEL') | default('3.x', true) }}\" sls_namespace: \"{{ lookup('env', 'SLS_NAMESPACE') | default('ibm-sls', true) }}\" sls_icr_cp: \"{{ lookup('env', 'SLS_ICR_CP') | default('cp.icr.io/cp', true) }}\" sls_icr_cpopen: \"{{ lookup('env', 'SLS_ICR_CPOPEN') | default('icr.io/cpopen', true) }}\" sls_instance_name: \"{{ lookup('env', 'SLS_INSTANCE_NAME') | default('sls', true) }}\" sls_entitlement_username: \"{{ lookup('env', 'SLS_ENTITLEMENT_USERNAME') | default('cp', true) }}\" sls_entitlement_key: \"{{ lookup('env', 'SLS_ENTITLEMENT_KEY') }}\" sls_storage_class: \"{{ lookup('env', 'SLS_STORAGE_CLASS') }}\" sls_domain: \"{{ lookup('env', 'SLS_DOMAIN') }}\" sls_cfg_file: \"{{ mas_config_dir }}/sls.yml\" # You can either provide a mongocfg file from MAS or provide mongo configuration manually mongodb_cfg_file: \"{{mas_config_dir}}/mongodb.yml\" # mongodb: # hosts: # - host: # - port: # username: \"{{ lookup('env', 'MONGODB_USERNAME') }}\" # password: \"{{ lookup('env', 'MONGODB_PASSWORD') }}\" # Bootstrap is used to initialize SLS, provide if you do have a lic file and licenseId you want to use bootstrap: license_id: \"{{ lookup('env', 'SLS_LICENSE_ID') | default('', true) }}\" registration_key: \"{{ lookup('env', 'SLS_REGISTRATION_KEY') | default('', true) }}\" entitlement_file: \"{{mas_config_dir}}/entitlement.lic\" roles: - ibm.mas_devops.sls_install License \uf0c1 EPL-2.0","title":"sls_install"},{"location":"roles/sls_install/#sls_install","text":"Install IBM Suite License Service and generate configuration that can be directly applied to IBM Maximo Application Suite.","title":"sls_install"},{"location":"roles/sls_install/#role-variables","text":"","title":"Role Variables"},{"location":"roles/sls_install/#pre-release-support","text":"artifactory_username : Required when using this role for development versions of SLS artifactory_apikey Required when using this role for development versions of SLS","title":"Pre-release support"},{"location":"roles/sls_install/#primary-settings","text":"sls_catalog_source Defines the catalog to be used to install SLS. You can set it to ibm-operator-catalog for release install or ibm-sls-operators for development sls_channel Defines which channel of MAS to subscribe to sls_namespace Defined the namespace where sls must be installed sls_icr_cp when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev sls_icr_cpopen when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev sls_instance_name Defines the instance id to be used for SLS installation sls_entitlement_username Username for entitled registry. This username will be used to create the image pull secret. Set to cp when installing release or use your w3Id for dev. sls_entitlement_key API Key for entitled registry. This password will be used to create the image pull secret. Set to with IBM entitlement key when installing release or use your sls_storage_class Defines the Storage Class that can be used by SLS to store data","title":"Primary settings"},{"location":"roles/sls_install/#mongodb-settings","text":"Use either mongodb_cfg_file or the mongodb object to configure the MongoDb for SLS to use mongodb_cfg_file Defines the path to the mongodb configuration used with MAS, when defined the SLS role will extract the configuration from there. mongodb Defines custom configuration for mongodb to be used with SLS, all the follwing facts are required when this fact is defined mongodb.hosts Defines list of host and port pair for MongoDb to be used with SLS mongodb.username Defines the MongoDB Username mongodb.password Defines the MongoDb Password bootstrap Bootstrap is used to initialize SLS, provide if you do have a lic file and licenseId you want to use bootstrap.license_id Defines the License Id to be used to bootstrap SLS bootstrap.registration_key Defines the Registration Key to be used to bootstrap SLS bootstrap.entitlement_file Defines the License File to be used to bootstrap SLS","title":"MongoDb settings"},{"location":"roles/sls_install/#mas-integration","text":"mas_instance_id The instance ID of Maximo Application Suite that the KafkaCfg configuration will target, there mas_config_dir Defines the directory from where some configs can be pulled from including the entitlement file and mongo configuration mas_instance_id Used to generate a output slscfg file for MAS sls_cfg_file Defines the destination dir for the generated SLS configuration for MAS","title":"MAS integration"},{"location":"roles/sls_install/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: sls_catalog_source: \"{{ lookup('env', 'SLS_CATALOG_SOURCE') | default('ibm-operator-catalog', true) }}\" sls_channel: \"{{ lookup('env', 'SLS_CHANNEL') | default('3.x', true) }}\" sls_namespace: \"{{ lookup('env', 'SLS_NAMESPACE') | default('ibm-sls', true) }}\" sls_icr_cp: \"{{ lookup('env', 'SLS_ICR_CP') | default('cp.icr.io/cp', true) }}\" sls_icr_cpopen: \"{{ lookup('env', 'SLS_ICR_CPOPEN') | default('icr.io/cpopen', true) }}\" sls_instance_name: \"{{ lookup('env', 'SLS_INSTANCE_NAME') | default('sls', true) }}\" sls_entitlement_username: \"{{ lookup('env', 'SLS_ENTITLEMENT_USERNAME') | default('cp', true) }}\" sls_entitlement_key: \"{{ lookup('env', 'SLS_ENTITLEMENT_KEY') }}\" sls_storage_class: \"{{ lookup('env', 'SLS_STORAGE_CLASS') }}\" sls_domain: \"{{ lookup('env', 'SLS_DOMAIN') }}\" sls_cfg_file: \"{{ mas_config_dir }}/sls.yml\" # You can either provide a mongocfg file from MAS or provide mongo configuration manually mongodb_cfg_file: \"{{mas_config_dir}}/mongodb.yml\" # mongodb: # hosts: # - host: # - port: # username: \"{{ lookup('env', 'MONGODB_USERNAME') }}\" # password: \"{{ lookup('env', 'MONGODB_PASSWORD') }}\" # Bootstrap is used to initialize SLS, provide if you do have a lic file and licenseId you want to use bootstrap: license_id: \"{{ lookup('env', 'SLS_LICENSE_ID') | default('', true) }}\" registration_key: \"{{ lookup('env', 'SLS_REGISTRATION_KEY') | default('', true) }}\" entitlement_file: \"{{mas_config_dir}}/entitlement.lic\" roles: - ibm.mas_devops.sls_install","title":"Example Playbook"},{"location":"roles/sls_install/#license","text":"EPL-2.0","title":"License"},{"location":"roles/suite_app_configure/","text":"suite_app_configure \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"suite_app_configure"},{"location":"roles/suite_app_configure/#suite_app_configure","text":"TODO: Summarize role","title":"suite_app_configure"},{"location":"roles/suite_app_configure/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/suite_app_configure/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/suite_app_configure/#license","text":"EPL-2.0","title":"License"},{"location":"roles/suite_app_install/","text":"suite_app_install \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"suite_app_install"},{"location":"roles/suite_app_install/#suite_app_install","text":"TODO: Summarize role","title":"suite_app_install"},{"location":"roles/suite_app_install/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/suite_app_install/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/suite_app_install/#license","text":"EPL-2.0","title":"License"},{"location":"roles/suite_config/","text":"suite_config \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"suite_config"},{"location":"roles/suite_config/#suite_config","text":"TODO: Summarize role","title":"suite_config"},{"location":"roles/suite_config/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/suite_config/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/suite_config/#license","text":"EPL-2.0","title":"License"},{"location":"roles/suite_dns/","text":"suite_dns \uf0c1 This role will manage MAS and DNS provider integration. IBM Cloud Internet Services is the only supported DNS provider currently. Cloud Internet Services (CIS) \uf0c1 This role will create DNS entries automatically in the CIS service instance. Two different modes are available: Top Level DNS entries \uf0c1 This mode will create the entries directly using your DNS zone value. It is usually recommended when you have 1x1 relationship between MAS Instance -> CIS service. e.g: mas.whirlpool.com, where the domain matches exactly the CIS zone name. Subdomain DNS entries \uf0c1 This mode will create entries using a subdomain. It allows you to have multiple MAS instances using same CIS service. e.g: dev.mas.whirlpool.com, where 'dev' is the subdomain. Webhook \uf0c1 The Webhook Task will deploy a cert-manager webhook for CIS integration. The webhook is responsible for managent the certificate challenge requests from letsencrypt and CIS. This task will also create two ClusterIssuers by default, pointing to Staging & Production LetsEncrypt servers. Warning We need to support a seperate cis_apikey property, because the API key provided will be stored in a secret in the cluster used by the webhook to create challenge request files in your DNS. We should support the ability to set the API key used here seperate from the main IBMCloud API key used elsewhere so that it can be restricted to only the permissions required by CIS. Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 --- - hosts: localhost any_errors_fatal: true vars: # Choose which catalog source to use for the MAS install, default to the IBM operator catalog mas_catalog_source: \"{{ lookup('env', 'MAS_CATALOG_SOURCE') | default('ibm-operator-catalog', true) }}\" # Which MAS channel to subscribe to mas_channel: \"{{ lookup('env', 'MAS_CHANNEL') | default('8.x', true) }}\" # MAS configuration custom_domain: \"{{ lookup('env', 'MAS_DOMAIN') | default(None)}}\" mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" # MAS configuration - Entitlement mas_entitlement_key: \"{{ lookup('env', 'MAS_ENTITLEMENT_KEY') }}\" # --- DNS settings ---------------------------------------------------------------------------------------- # you can obtain CRN from overview page of your CIS service in IBM Cloud cis_crn: \"{{ lookup('env', 'CIS_CRN') }}\" # Domain prefix is whatever you want to append to your DNS entry to make it unique cis_subdomain: \"{{ lookup('env', 'CIS_SUBDOMAIN') }}\" # generate your apikey in IBM Cloud ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" # Email used register letsencrypt certificates and receive cert notifications cis_email: \"{{ lookup('env', 'CIS_EMAIL') }}\" # Skip DNS entries creation cis_skip_dns_entries: \"{{ lookup('env', 'CIS_SKIP_DNS_ENTRIES') | default(false, true) }}\" # Skip CIS cluster issuer creation, in case you just want to create the DNS entries cis_skip_cluster_issuer: \"{{ lookup('env', 'CIS_SKIP_CLUSTER_ISSUER') | default(false, true) }}\" # Do you want to update a DNS entry if it already exists? update_dns: \"{{ lookup('env', 'UPDATE_DNS_ENTRIES') | default(true, true) }}\" # e.g: \"apps.joaopauloksn.cp.fyre.ibm.com\" Default will be always from cluster ingress CR. custom_ocp_ingress: \"{{ lookup('env', 'OCP_INGRESS') | default(None, true)}}\" # If cis, custom_cluster_issuer = cis-letsencrypt-production # If PKI, custom_cluster_issuer = MAS_CUSTOM_CLUSTER_ISSUER # If not specified, custom_cluster_issuer = autogenerated custom_cluster_issuer: \"{{ (cis_crn != '') | ternary (lookup('env', 'MAS_CUSTOM_CLUSTER_ISSUER') | default('cis-letsencrypt-production', true), lookup('env', 'MAS_CUSTOM_CLUSTER_ISSUER') | default(None, true)) }}\" certificate_duration: \"{{ lookup('env', 'CERTIFICATE_DURATION') | default('8760h0m0s', true) }}\" certificate_renew_before: \"{{ lookup('env', 'CERTIFICATE_RENEW_BEFORE') | default('720h0m0s', true) }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.suite_dns - ibm.mas_devops.suite_install - ibm.mas_devops.suite_config - ibm.mas_devops.suite_verify License \uf0c1 EPL-2.0","title":"suite_dns"},{"location":"roles/suite_dns/#suite_dns","text":"This role will manage MAS and DNS provider integration. IBM Cloud Internet Services is the only supported DNS provider currently.","title":"suite_dns"},{"location":"roles/suite_dns/#cloud-internet-services-cis","text":"This role will create DNS entries automatically in the CIS service instance. Two different modes are available:","title":"Cloud Internet Services (CIS)"},{"location":"roles/suite_dns/#top-level-dns-entries","text":"This mode will create the entries directly using your DNS zone value. It is usually recommended when you have 1x1 relationship between MAS Instance -> CIS service. e.g: mas.whirlpool.com, where the domain matches exactly the CIS zone name.","title":"Top Level DNS entries"},{"location":"roles/suite_dns/#subdomain-dns-entries","text":"This mode will create entries using a subdomain. It allows you to have multiple MAS instances using same CIS service. e.g: dev.mas.whirlpool.com, where 'dev' is the subdomain.","title":"Subdomain DNS entries"},{"location":"roles/suite_dns/#webhook","text":"The Webhook Task will deploy a cert-manager webhook for CIS integration. The webhook is responsible for managent the certificate challenge requests from letsencrypt and CIS. This task will also create two ClusterIssuers by default, pointing to Staging & Production LetsEncrypt servers. Warning We need to support a seperate cis_apikey property, because the API key provided will be stored in a secret in the cluster used by the webhook to create challenge request files in your DNS. We should support the ability to set the API key used here seperate from the main IBMCloud API key used elsewhere so that it can be restricted to only the permissions required by CIS.","title":"Webhook"},{"location":"roles/suite_dns/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/suite_dns/#example-playbook","text":"--- - hosts: localhost any_errors_fatal: true vars: # Choose which catalog source to use for the MAS install, default to the IBM operator catalog mas_catalog_source: \"{{ lookup('env', 'MAS_CATALOG_SOURCE') | default('ibm-operator-catalog', true) }}\" # Which MAS channel to subscribe to mas_channel: \"{{ lookup('env', 'MAS_CHANNEL') | default('8.x', true) }}\" # MAS configuration custom_domain: \"{{ lookup('env', 'MAS_DOMAIN') | default(None)}}\" mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" # MAS configuration - Entitlement mas_entitlement_key: \"{{ lookup('env', 'MAS_ENTITLEMENT_KEY') }}\" # --- DNS settings ---------------------------------------------------------------------------------------- # you can obtain CRN from overview page of your CIS service in IBM Cloud cis_crn: \"{{ lookup('env', 'CIS_CRN') }}\" # Domain prefix is whatever you want to append to your DNS entry to make it unique cis_subdomain: \"{{ lookup('env', 'CIS_SUBDOMAIN') }}\" # generate your apikey in IBM Cloud ibmcloud_apikey: \"{{ lookup('env', 'IBMCLOUD_APIKEY') }}\" # Email used register letsencrypt certificates and receive cert notifications cis_email: \"{{ lookup('env', 'CIS_EMAIL') }}\" # Skip DNS entries creation cis_skip_dns_entries: \"{{ lookup('env', 'CIS_SKIP_DNS_ENTRIES') | default(false, true) }}\" # Skip CIS cluster issuer creation, in case you just want to create the DNS entries cis_skip_cluster_issuer: \"{{ lookup('env', 'CIS_SKIP_CLUSTER_ISSUER') | default(false, true) }}\" # Do you want to update a DNS entry if it already exists? update_dns: \"{{ lookup('env', 'UPDATE_DNS_ENTRIES') | default(true, true) }}\" # e.g: \"apps.joaopauloksn.cp.fyre.ibm.com\" Default will be always from cluster ingress CR. custom_ocp_ingress: \"{{ lookup('env', 'OCP_INGRESS') | default(None, true)}}\" # If cis, custom_cluster_issuer = cis-letsencrypt-production # If PKI, custom_cluster_issuer = MAS_CUSTOM_CLUSTER_ISSUER # If not specified, custom_cluster_issuer = autogenerated custom_cluster_issuer: \"{{ (cis_crn != '') | ternary (lookup('env', 'MAS_CUSTOM_CLUSTER_ISSUER') | default('cis-letsencrypt-production', true), lookup('env', 'MAS_CUSTOM_CLUSTER_ISSUER') | default(None, true)) }}\" certificate_duration: \"{{ lookup('env', 'CERTIFICATE_DURATION') | default('8760h0m0s', true) }}\" certificate_renew_before: \"{{ lookup('env', 'CERTIFICATE_RENEW_BEFORE') | default('720h0m0s', true) }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.suite_dns - ibm.mas_devops.suite_install - ibm.mas_devops.suite_config - ibm.mas_devops.suite_verify","title":"Example Playbook"},{"location":"roles/suite_dns/#license","text":"EPL-2.0","title":"License"},{"location":"roles/suite_install/","text":"suite_install \uf0c1 TODO: Summarize role Role Variables \uf0c1 mas_catalog_source Defines the catalog to be used to install MAS. You can set it to ibm-operator-catalog for release install or ibm-mas-operators for development artifactory_username Required when using this role for development versions of MAS artifactory_apikey Required when using this role for development versions of MAS mas_channel Defines which channel of MAS to subscribe to mas_domain Opitional fact, if not provided the role will use the default cluster subdomain mas_instance_id Defines the instance id to be used for MAS installation mas_icr_cp Defines the entitled registry from the images should be pulled from. Set this to cp.icr.io/cp when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev mas_icr_cpopen Defines the registry for non entitled images, such as operators. Set this to icr.io/cpopen when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev mas_entitlement_username Username for entitled registry. This username will be used to create the image pull secret. Set to cp when installing release or use your w3Id for dev. mas_entitlement_key API Key for entitled registry. This password will be used to create the image pull secret. Set to with IBM entitlement key when installing release or use your artifactory apikey for dev. mas_config List of configuration files to be applied to configure the MAS installation Example Playbook \uf0c1 - hosts: localhost any_errors_fatal: true vars: # Which MAS channel to subscribe to mas_channel: \"{{ lookup('env', 'MAS_CHANNEL') | default('8.x', true) }}\" # MAS configuration custom_domain: \"{{ lookup('env', 'MAS_DOMAIN') | default(None)}}\" mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" # MAS configuration - Entitlement mas_entitlement_key: \"{{ lookup('env', 'MAS_ENTITLEMENT_KEY') }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.suite_install - ibm.mas_devops.suite_config - ibm.mas_devops.suite_verify License \uf0c1 EPL-2.0","title":"suite_install"},{"location":"roles/suite_install/#suite_install","text":"TODO: Summarize role","title":"suite_install"},{"location":"roles/suite_install/#role-variables","text":"mas_catalog_source Defines the catalog to be used to install MAS. You can set it to ibm-operator-catalog for release install or ibm-mas-operators for development artifactory_username Required when using this role for development versions of MAS artifactory_apikey Required when using this role for development versions of MAS mas_channel Defines which channel of MAS to subscribe to mas_domain Opitional fact, if not provided the role will use the default cluster subdomain mas_instance_id Defines the instance id to be used for MAS installation mas_icr_cp Defines the entitled registry from the images should be pulled from. Set this to cp.icr.io/cp when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev mas_icr_cpopen Defines the registry for non entitled images, such as operators. Set this to icr.io/cpopen when installing release version of MAS or wiotp-docker-local.artifactory.swg-devops.com for dev mas_entitlement_username Username for entitled registry. This username will be used to create the image pull secret. Set to cp when installing release or use your w3Id for dev. mas_entitlement_key API Key for entitled registry. This password will be used to create the image pull secret. Set to with IBM entitlement key when installing release or use your artifactory apikey for dev. mas_config List of configuration files to be applied to configure the MAS installation","title":"Role Variables"},{"location":"roles/suite_install/#example-playbook","text":"- hosts: localhost any_errors_fatal: true vars: # Which MAS channel to subscribe to mas_channel: \"{{ lookup('env', 'MAS_CHANNEL') | default('8.x', true) }}\" # MAS configuration custom_domain: \"{{ lookup('env', 'MAS_DOMAIN') | default(None)}}\" mas_instance_id: \"{{ lookup('env', 'MAS_INSTANCE_ID') }}\" # MAS configuration - Entitlement mas_entitlement_key: \"{{ lookup('env', 'MAS_ENTITLEMENT_KEY') }}\" mas_config_dir: \"{{ lookup('env', 'MAS_CONFIG_DIR') }}\" roles: - ibm.mas_devops.suite_install - ibm.mas_devops.suite_config - ibm.mas_devops.suite_verify","title":"Example Playbook"},{"location":"roles/suite_install/#license","text":"EPL-2.0","title":"License"},{"location":"roles/suite_verify/","text":"suite_verify \uf0c1 TODO: Summarize role Role Variables \uf0c1 TODO: Finish documentation Example Playbook \uf0c1 TODO: Add example License \uf0c1 EPL-2.0","title":"suite_verify"},{"location":"roles/suite_verify/#suite_verify","text":"TODO: Summarize role","title":"suite_verify"},{"location":"roles/suite_verify/#role-variables","text":"TODO: Finish documentation","title":"Role Variables"},{"location":"roles/suite_verify/#example-playbook","text":"TODO: Add example","title":"Example Playbook"},{"location":"roles/suite_verify/#license","text":"EPL-2.0","title":"License"}]}